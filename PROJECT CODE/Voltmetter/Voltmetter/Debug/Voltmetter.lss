
Voltmetter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000926  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00000926  0000099a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010e4  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c7  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000689  00000000  00000000  000022ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00002934  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038c  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000055f  00000000  00000000  00002d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000032d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3f       	cpi	r26, 0xF8	; 248
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 65 02 	call	0x4ca	; 0x4ca <main>
  7a:	0c 94 91 04 	jmp	0x922	; 0x922 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_com>:
	}
}

void LCD_com(unsigned char	cmnd)
{
	LCD_com_PORT &= ~(1<<RW);
  82:	98 b3       	in	r25, 0x18	; 24
  84:	9f 7b       	andi	r25, 0xBF	; 191
  86:	98 bb       	out	0x18, r25	; 24
	LCD_com_PORT &= ~(1<<RS);
  88:	98 b3       	in	r25, 0x18	; 24
  8a:	9f 7d       	andi	r25, 0xDF	; 223
  8c:	98 bb       	out	0x18, r25	; 24
	LCD_data_PORT = cmnd;
  8e:	82 bb       	out	0x12, r24	; 18
	LCD_com_PORT |= (1<<EN);
  90:	88 b3       	in	r24, 0x18	; 24
  92:	80 68       	ori	r24, 0x80	; 128
  94:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8f ec       	ldi	r24, 0xCF	; 207
  98:	97 e0       	ldi	r25, 0x07	; 7
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_com+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_com+0x1e>
  a0:	00 00       	nop
	_delay_ms(1);
	LCD_com_PORT &= ~(1<<EN);
  a2:	88 b3       	in	r24, 0x18	; 24
  a4:	8f 77       	andi	r24, 0x7F	; 127
  a6:	88 bb       	out	0x18, r24	; 24
  a8:	8f e0       	ldi	r24, 0x0F	; 15
  aa:	97 e2       	ldi	r25, 0x27	; 39
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_com+0x2a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_com+0x30>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <LCD_char>:
	_delay_ms(5);
}

void LCD_char(unsigned char char_data)
{
		LCD_com_PORT &= ~(1<<RW);
  b6:	98 b3       	in	r25, 0x18	; 24
  b8:	9f 7b       	andi	r25, 0xBF	; 191
  ba:	98 bb       	out	0x18, r25	; 24
		LCD_com_PORT |= (1<<RS);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	90 62       	ori	r25, 0x20	; 32
  c0:	98 bb       	out	0x18, r25	; 24
		LCD_data_PORT = char_data;
  c2:	82 bb       	out	0x12, r24	; 18
		LCD_com_PORT |= (1<<EN);
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	8f ec       	ldi	r24, 0xCF	; 207
  cc:	97 e0       	ldi	r25, 0x07	; 7
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_char+0x18>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_char+0x1e>
  d4:	00 00       	nop
		_delay_ms(1);
		LCD_com_PORT &= ~(1<<EN);
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	88 bb       	out	0x18, r24	; 24
  dc:	8f e0       	ldi	r24, 0x0F	; 15
  de:	97 e2       	ldi	r25, 0x27	; 39
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_char+0x2a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_char+0x30>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <LCD_string>:
		_delay_ms(5);
}

void LCD_string(char *str)
{
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	8c 01       	movw	r16, r24
	int i;
	for(i = 0; str[i]!=0;i++)
  f4:	c0 e0       	ldi	r28, 0x00	; 0
  f6:	d0 e0       	ldi	r29, 0x00	; 0
  f8:	03 c0       	rjmp	.+6      	; 0x100 <LCD_string+0x16>
	{
		LCD_char(str[i]);
  fa:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
}

void LCD_string(char *str)
{
	int i;
	for(i = 0; str[i]!=0;i++)
  fe:	21 96       	adiw	r28, 0x01	; 1
 100:	f8 01       	movw	r30, r16
 102:	ec 0f       	add	r30, r28
 104:	fd 1f       	adc	r31, r29
 106:	80 81       	ld	r24, Z
 108:	81 11       	cpse	r24, r1
 10a:	f7 cf       	rjmp	.-18     	; 0xfa <LCD_string+0x10>
	{
		LCD_char(str[i]);
	}
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <Single>:

void Single()
{
	float  Vin;
	int V, V1, V2, V3, V4;
	LCD_com(0x01);
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Single mode");
 11c:	80 e6       	ldi	r24, 0x60	; 96
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	while(1)
	{
	ADMUX |= (1<<REFS0)|(1<<MUX1);
 124:	87 b1       	in	r24, 0x07	; 7
 126:	82 64       	ori	r24, 0x42	; 66
 128:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADATE) |(1<<ADPS2) |(1<<ADPS1)|(1<<ADPS0);
 12a:	86 b1       	in	r24, 0x06	; 6
 12c:	87 6e       	ori	r24, 0xE7	; 231
 12e:	86 b9       	out	0x06, r24	; 6
	SFIOR |= 0;
 130:	80 b7       	in	r24, 0x30	; 48
 132:	80 bf       	out	0x30, r24	; 48
	while(!(ADCSRA & (1<<ADIF)));
 134:	34 9b       	sbis	0x06, 4	; 6
 136:	fe cf       	rjmp	.-4      	; 0x134 <Single+0x1e>
	ADCSRA |= (1<<ADIF);
 138:	86 b1       	in	r24, 0x06	; 6
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	86 b9       	out	0x06, r24	; 6
	Vin = (ADC*4.8828);
 13e:	64 b1       	in	r22, 0x04	; 4
 140:	75 b1       	in	r23, 0x05	; 5
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 09 03 	call	0x612	; 0x612 <__floatunsisf>
 14a:	26 ee       	ldi	r18, 0xE6	; 230
 14c:	3f e3       	ldi	r19, 0x3F	; 63
 14e:	4c e9       	ldi	r20, 0x9C	; 156
 150:	50 e4       	ldi	r21, 0x40	; 64
 152:	0e 94 93 03 	call	0x726	; 0x726 <__mulsf3>
	V = Vin;
 156:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__fixsfsi>
	V1 = (V/1000);
 15a:	cb 01       	movw	r24, r22
 15c:	68 ee       	ldi	r22, 0xE8	; 232
 15e:	73 e0       	ldi	r23, 0x03	; 3
 160:	0e 94 28 04 	call	0x850	; 0x850 <__divmodhi4>
 164:	06 2f       	mov	r16, r22
	V2 = (V%1000)/100;
 166:	64 e6       	ldi	r22, 0x64	; 100
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	0e 94 28 04 	call	0x850	; 0x850 <__divmodhi4>
 16e:	16 2f       	mov	r17, r22
	V3 = ((V%1000)%100)/10;
 170:	6a e0       	ldi	r22, 0x0A	; 10
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	0e 94 28 04 	call	0x850	; 0x850 <__divmodhi4>
 178:	d6 2f       	mov	r29, r22
 17a:	c8 2f       	mov	r28, r24
	V4 = (((V%1000)%100))%10;
	LCD_com(0Xc5);
 17c:	85 ec       	ldi	r24, 0xC5	; 197
 17e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_char(V1+0x30);
 182:	80 e3       	ldi	r24, 0x30	; 48
 184:	80 0f       	add	r24, r16
 186:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
	LCD_char(',');
 18a:	8c e2       	ldi	r24, 0x2C	; 44
 18c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
	LCD_char(V2+0x30);
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	81 0f       	add	r24, r17
 194:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
	LCD_char(V3+0x30);
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	8d 0f       	add	r24, r29
 19c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
	LCD_char(V4+0x30);
 1a0:	80 e3       	ldi	r24, 0x30	; 48
 1a2:	8c 0f       	add	r24, r28
 1a4:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
	}
 1a8:	bd cf       	rjmp	.-134    	; 0x124 <Single+0xe>

000001aa <Diff_1>:

void Diff_1()
{
	long double  Vin = 0;
	int V = 0, V1, V2, V3, V4, V5;
	LCD_com(0x01);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Diff x1");
 1b0:	8c e6       	ldi	r24, 0x6C	; 108
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	ADMUX |= (1<<REFS0)|(1<<MUX4);	//vi sai G = 1 PA0(+), PA1(-)
 1b8:	87 b1       	in	r24, 0x07	; 7
 1ba:	80 65       	ori	r24, 0x50	; 80
 1bc:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN)|(1<<ADPS2) |(1<<ADPS1)|(1<<ADPS0);
 1be:	86 b1       	in	r24, 0x06	; 6
 1c0:	87 68       	ori	r24, 0x87	; 135
 1c2:	86 b9       	out	0x06, r24	; 6
	SFIOR |= 0;
 1c4:	80 b7       	in	r24, 0x30	; 48
 1c6:	80 bf       	out	0x30, r24	; 48
	while(1)
	{
		ADCSRA |= (1<<ADSC);
 1c8:	86 b1       	in	r24, 0x06	; 6
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	86 b9       	out	0x06, r24	; 6
		while(!(ADCSRA & (1<<ADIF))); //check co ADIF
 1ce:	34 9b       	sbis	0x06, 4	; 6
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <Diff_1+0x24>
		ADCSRA |= (1<<ADIF);			// xoa co ADIF
 1d2:	86 b1       	in	r24, 0x06	; 6
 1d4:	80 61       	ori	r24, 0x10	; 16
 1d6:	86 b9       	out	0x06, r24	; 6
		Vin = (ADC*4.8828);			// Vin = ADC*5000/512 ;lay 3 so thap phan sau dau phay
 1d8:	64 b1       	in	r22, 0x04	; 4
 1da:	75 b1       	in	r23, 0x05	; 5
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 09 03 	call	0x612	; 0x612 <__floatunsisf>
 1e4:	26 ee       	ldi	r18, 0xE6	; 230
 1e6:	3f e3       	ldi	r19, 0x3F	; 63
 1e8:	4c e9       	ldi	r20, 0x9C	; 156
 1ea:	50 e4       	ldi	r21, 0x40	; 64
 1ec:	0e 94 93 03 	call	0x726	; 0x726 <__mulsf3>
 1f0:	6b 01       	movw	r12, r22
 1f2:	7c 01       	movw	r14, r24

		if(Vin==0)
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	a9 01       	movw	r20, r18
 1fa:	0e 94 ce 02 	call	0x59c	; 0x59c <__cmpsf2>
 1fe:	81 11       	cpse	r24, r1
 200:	08 c0       	rjmp	.+16     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
		{
			LCD_com(0xC2);
 202:	82 ec       	ldi	r24, 0xC2	; 194
 204:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
			LCD_string(" Opposite ");
 208:	84 e7       	ldi	r24, 0x74	; 116
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
 210:	db cf       	rjmp	.-74     	; 0x1c8 <Diff_1+0x1e>
	
		}
		else
		{
			V = Vin;
 212:	c7 01       	movw	r24, r14
 214:	b6 01       	movw	r22, r12
 216:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__fixsfsi>
			V1 = (V/10000);
 21a:	cb 01       	movw	r24, r22
 21c:	60 e1       	ldi	r22, 0x10	; 16
 21e:	77 e2       	ldi	r23, 0x27	; 39
 220:	0e 94 28 04 	call	0x850	; 0x850 <__divmodhi4>
 224:	f6 2e       	mov	r15, r22
			V2 = (V%10000)/1000;
 226:	68 ee       	ldi	r22, 0xE8	; 232
 228:	73 e0       	ldi	r23, 0x03	; 3
 22a:	0e 94 28 04 	call	0x850	; 0x850 <__divmodhi4>
 22e:	06 2f       	mov	r16, r22
			V3 = ((V%10000)%1000)/100;
 230:	64 e6       	ldi	r22, 0x64	; 100
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	0e 94 28 04 	call	0x850	; 0x850 <__divmodhi4>
 238:	16 2f       	mov	r17, r22
			V4 = ((((V%10000)%1000))%100)/10;
 23a:	6a e0       	ldi	r22, 0x0A	; 10
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	0e 94 28 04 	call	0x850	; 0x850 <__divmodhi4>
 242:	d6 2f       	mov	r29, r22
 244:	c8 2f       	mov	r28, r24
			V5 = ((((V%10000)%1000))%100)%10;

			LCD_com(0Xc2);
 246:	82 ec       	ldi	r24, 0xC2	; 194
 248:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
			LCD_string("Vi=");
 24c:	8f e7       	ldi	r24, 0x7F	; 127
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
			LCD_char(V1+0x30);
 254:	80 e3       	ldi	r24, 0x30	; 48
 256:	8f 0d       	add	r24, r15
 258:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
			LCD_char(V2+0x30);
 25c:	80 e3       	ldi	r24, 0x30	; 48
 25e:	80 0f       	add	r24, r16
 260:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
			LCD_char(',');
 264:	8c e2       	ldi	r24, 0x2C	; 44
 266:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
			LCD_char(V3+0x30);
 26a:	80 e3       	ldi	r24, 0x30	; 48
 26c:	81 0f       	add	r24, r17
 26e:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
			LCD_char(V4+0x30);
 272:	80 e3       	ldi	r24, 0x30	; 48
 274:	8d 0f       	add	r24, r29
 276:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
			LCD_char(V5+0x30);
 27a:	80 e3       	ldi	r24, 0x30	; 48
 27c:	8c 0f       	add	r24, r28
 27e:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
 282:	a2 cf       	rjmp	.-188    	; 0x1c8 <Diff_1+0x1e>

00000284 <Diff_10>:

void Diff_10()
{
	long double  Vin = 0;
	long int V = 0, V1, V2, V3, V4, V5;
	LCD_com(0x01);
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Diff x10");
 28a:	83 e8       	ldi	r24, 0x83	; 131
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	ADMUX |= (1<<REFS0)|(1<<MUX3)|(1<<MUX0);	//vi sai G = 1 PA0(+), PA1(-)
 292:	87 b1       	in	r24, 0x07	; 7
 294:	89 64       	ori	r24, 0x49	; 73
 296:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN)|(1<<ADPS2) |(1<<ADPS1)|(1<<ADPS0);
 298:	86 b1       	in	r24, 0x06	; 6
 29a:	87 68       	ori	r24, 0x87	; 135
 29c:	86 b9       	out	0x06, r24	; 6
	SFIOR |= 0;
 29e:	80 b7       	in	r24, 0x30	; 48
 2a0:	80 bf       	out	0x30, r24	; 48
	while(1)
	{

		ADCSRA |= (1<<ADSC);
 2a2:	86 b1       	in	r24, 0x06	; 6
 2a4:	80 64       	ori	r24, 0x40	; 64
 2a6:	86 b9       	out	0x06, r24	; 6
		while(!(ADCSRA & (1<<ADIF))); //check co ADIF 
 2a8:	34 9b       	sbis	0x06, 4	; 6
 2aa:	fe cf       	rjmp	.-4      	; 0x2a8 <Diff_10+0x24>
		ADCSRA |= (1<<ADIF);			// xoa co ADIF
 2ac:	86 b1       	in	r24, 0x06	; 6
 2ae:	80 61       	ori	r24, 0x10	; 16
 2b0:	86 b9       	out	0x06, r24	; 6
		Vin = (ADC*0.9765625/2);			// Vin = ADC*5000/512 ;lay 3 so thap phan sau dau phay
 2b2:	64 b1       	in	r22, 0x04	; 4
 2b4:	75 b1       	in	r23, 0x05	; 5
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 09 03 	call	0x612	; 0x612 <__floatunsisf>
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	4a e7       	ldi	r20, 0x7A	; 122
 2c4:	5f e3       	ldi	r21, 0x3F	; 63
 2c6:	0e 94 93 03 	call	0x726	; 0x726 <__mulsf3>
 2ca:	20 e0       	ldi	r18, 0x00	; 0
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	5f e3       	ldi	r21, 0x3F	; 63
 2d2:	0e 94 93 03 	call	0x726	; 0x726 <__mulsf3>
 2d6:	6b 01       	movw	r12, r22
 2d8:	7c 01       	movw	r14, r24
		if(Vin==0)
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	a9 01       	movw	r20, r18
 2e0:	0e 94 ce 02 	call	0x59c	; 0x59c <__cmpsf2>
 2e4:	81 11       	cpse	r24, r1
 2e6:	08 c0       	rjmp	.+16     	; 0x2f8 <Diff_10+0x74>
			{
			LCD_com(0xC2);
 2e8:	82 ec       	ldi	r24, 0xC2	; 194
 2ea:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
			LCD_string(" Opposite ");
 2ee:	84 e7       	ldi	r24, 0x74	; 116
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
 2f6:	d5 cf       	rjmp	.-86     	; 0x2a2 <Diff_10+0x1e>
			}
		else
			{
				V = Vin;
 2f8:	c7 01       	movw	r24, r14
 2fa:	b6 01       	movw	r22, r12
 2fc:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__fixsfsi>
				V1 = (V/10000);
 300:	20 e1       	ldi	r18, 0x10	; 16
 302:	37 e2       	ldi	r19, 0x27	; 39
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	50 e0       	ldi	r21, 0x00	; 0
 308:	0e 94 3c 04 	call	0x878	; 0x878 <__divmodsi4>
 30c:	f2 2e       	mov	r15, r18
				V2 = (V%10000)/1000;
 30e:	28 ee       	ldi	r18, 0xE8	; 232
 310:	33 e0       	ldi	r19, 0x03	; 3
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	0e 94 3c 04 	call	0x878	; 0x878 <__divmodsi4>
 31a:	02 2f       	mov	r16, r18
				V3 = ((V%10000)%1000)/100;
 31c:	24 e6       	ldi	r18, 0x64	; 100
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	50 e0       	ldi	r21, 0x00	; 0
 324:	0e 94 3c 04 	call	0x878	; 0x878 <__divmodsi4>
 328:	12 2f       	mov	r17, r18
				V4 = ((((V%10000)%1000))%100)/10;
 32a:	2a e0       	ldi	r18, 0x0A	; 10
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	0e 94 3c 04 	call	0x878	; 0x878 <__divmodsi4>
 336:	d2 2f       	mov	r29, r18
 338:	c6 2f       	mov	r28, r22
				V5 = ((((V%10000)%1000))%100)%10;
				LCD_com(0Xc2);
 33a:	82 ec       	ldi	r24, 0xC2	; 194
 33c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
				LCD_string("Vi=");
 340:	8f e7       	ldi	r24, 0x7F	; 127
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
				LCD_char(V1+0x30);
 348:	80 e3       	ldi	r24, 0x30	; 48
 34a:	8f 0d       	add	r24, r15
 34c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V2+0x30);
 350:	80 e3       	ldi	r24, 0x30	; 48
 352:	80 0f       	add	r24, r16
 354:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(',');
 358:	8c e2       	ldi	r24, 0x2C	; 44
 35a:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V3+0x30);
 35e:	80 e3       	ldi	r24, 0x30	; 48
 360:	81 0f       	add	r24, r17
 362:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V4+0x30);
 366:	80 e3       	ldi	r24, 0x30	; 48
 368:	8d 0f       	add	r24, r29
 36a:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V5+0x30);
 36e:	80 e3       	ldi	r24, 0x30	; 48
 370:	8c 0f       	add	r24, r28
 372:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_com(0x80);
 376:	80 e8       	ldi	r24, 0x80	; 128
 378:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
 37c:	92 cf       	rjmp	.-220    	; 0x2a2 <Diff_10+0x1e>

0000037e <Diff_200>:

void Diff_200()
{
	double  Vin = 0;
	int V = 0, V1, V2, V3, V4, V5; 
	LCD_com(0x01);
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Diff x200");
 384:	8c e8       	ldi	r24, 0x8C	; 140
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	ADMUX |= (1<<REFS0)|(1<<MUX3)|(1<<MUX1)|(1<<MUX0);
 38c:	87 b1       	in	r24, 0x07	; 7
 38e:	8b 64       	ori	r24, 0x4B	; 75
 390:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN) |(1<<ADPS2) |(1<<ADPS1);	//mode chuyen doi 1 lan
 392:	86 b1       	in	r24, 0x06	; 6
 394:	86 68       	ori	r24, 0x86	; 134
 396:	86 b9       	out	0x06, r24	; 6
	while(1)
	{
		ADCSRA |= (1<<ADSC);
 398:	86 b1       	in	r24, 0x06	; 6
 39a:	80 64       	ori	r24, 0x40	; 64
 39c:	86 b9       	out	0x06, r24	; 6
		while(!(ADCSRA & (1<<ADIF)));
 39e:	34 9b       	sbis	0x06, 4	; 6
 3a0:	fe cf       	rjmp	.-4      	; 0x39e <Diff_200+0x20>
		ADCSRA |= (1<<ADIF);
 3a2:	86 b1       	in	r24, 0x06	; 6
 3a4:	80 61       	ori	r24, 0x10	; 16
 3a6:	86 b9       	out	0x06, r24	; 6
		Vin = (ADC*25/1024); 
 3a8:	84 b1       	in	r24, 0x04	; 4
 3aa:	95 b1       	in	r25, 0x05	; 5
 3ac:	29 e1       	ldi	r18, 0x19	; 25
 3ae:	28 9f       	mul	r18, r24
 3b0:	e0 01       	movw	r28, r0
 3b2:	29 9f       	mul	r18, r25
 3b4:	d0 0d       	add	r29, r0
 3b6:	11 24       	eor	r1, r1
 3b8:	cd 2f       	mov	r28, r29
 3ba:	dd 27       	eor	r29, r29
 3bc:	c6 95       	lsr	r28
 3be:	c6 95       	lsr	r28
 3c0:	be 01       	movw	r22, r28
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 09 03 	call	0x612	; 0x612 <__floatunsisf>
		if(Vin==0)
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	a9 01       	movw	r20, r18
 3d0:	0e 94 ce 02 	call	0x59c	; 0x59c <__cmpsf2>
 3d4:	81 11       	cpse	r24, r1
 3d6:	08 c0       	rjmp	.+16     	; 0x3e8 <Diff_200+0x6a>
			{
			LCD_com(0xC2);
 3d8:	82 ec       	ldi	r24, 0xC2	; 194
 3da:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
			LCD_string(" Opposite ");
 3de:	84 e7       	ldi	r24, 0x74	; 116
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
 3e6:	d8 cf       	rjmp	.-80     	; 0x398 <Diff_200+0x1a>
			}
		else
			{
				V = Vin;
				V1 = (V/10000);
 3e8:	ce 01       	movw	r24, r28
 3ea:	60 e1       	ldi	r22, 0x10	; 16
 3ec:	77 e2       	ldi	r23, 0x27	; 39
 3ee:	0e 94 28 04 	call	0x850	; 0x850 <__divmodhi4>
 3f2:	f6 2e       	mov	r15, r22
				V2 = (V%10000)/1000;
 3f4:	68 ee       	ldi	r22, 0xE8	; 232
 3f6:	73 e0       	ldi	r23, 0x03	; 3
 3f8:	0e 94 28 04 	call	0x850	; 0x850 <__divmodhi4>
 3fc:	06 2f       	mov	r16, r22
				V3 = ((V%10000)%1000)/100;
 3fe:	64 e6       	ldi	r22, 0x64	; 100
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	0e 94 28 04 	call	0x850	; 0x850 <__divmodhi4>
 406:	16 2f       	mov	r17, r22
				V4 = ((((V%10000)%1000))%100)/10;
 408:	6a e0       	ldi	r22, 0x0A	; 10
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	0e 94 28 04 	call	0x850	; 0x850 <__divmodhi4>
 410:	d6 2f       	mov	r29, r22
 412:	c8 2f       	mov	r28, r24
				V5 = ((((V%10000)%1000))%100)%10;
				LCD_com(0Xc2);
 414:	82 ec       	ldi	r24, 0xC2	; 194
 416:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
				LCD_string("Vi=");
 41a:	8f e7       	ldi	r24, 0x7F	; 127
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
				LCD_char(V1+0x30);
 422:	80 e3       	ldi	r24, 0x30	; 48
 424:	8f 0d       	add	r24, r15
 426:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V2+0x30);
 42a:	80 e3       	ldi	r24, 0x30	; 48
 42c:	80 0f       	add	r24, r16
 42e:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(',');
 432:	8c e2       	ldi	r24, 0x2C	; 44
 434:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V3+0x30);
 438:	80 e3       	ldi	r24, 0x30	; 48
 43a:	81 0f       	add	r24, r17
 43c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V4+0x30);
 440:	80 e3       	ldi	r24, 0x30	; 48
 442:	8d 0f       	add	r24, r29
 444:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V5+0x30);
 448:	80 e3       	ldi	r24, 0x30	; 48
 44a:	8c 0f       	add	r24, r28
 44c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_com(0x80);
 450:	80 e8       	ldi	r24, 0x80	; 128
 452:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
 456:	a0 cf       	rjmp	.-192    	; 0x398 <Diff_200+0x1a>

00000458 <Diff>:
	}
}

void Diff()
{
	LCD_com(0x01);
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Diff mode");
 45e:	86 e9       	ldi	r24, 0x96	; 150
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
 466:	2f ef       	ldi	r18, 0xFF	; 255
 468:	80 e7       	ldi	r24, 0x70	; 112
 46a:	92 e0       	ldi	r25, 0x02	; 2
 46c:	21 50       	subi	r18, 0x01	; 1
 46e:	80 40       	sbci	r24, 0x00	; 0
 470:	90 40       	sbci	r25, 0x00	; 0
 472:	e1 f7       	brne	.-8      	; 0x46c <__stack+0xd>
 474:	00 c0       	rjmp	.+0      	; 0x476 <__stack+0x17>
 476:	00 00       	nop
	_delay_ms(100);
	LCD_com(0x01);
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("select Gain");
 47e:	80 ea       	ldi	r24, 0xA0	; 160
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	
	while(1)
	{
	
		if((PINA & (1<<Gain_200)) == 0)
 486:	cf 99       	sbic	0x19, 7	; 25
 488:	09 c0       	rjmp	.+18     	; 0x49c <__stack+0x3d>
 48a:	8f e1       	ldi	r24, 0x1F	; 31
 48c:	9e e4       	ldi	r25, 0x4E	; 78
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <__stack+0x2f>
 492:	00 c0       	rjmp	.+0      	; 0x494 <__stack+0x35>
 494:	00 00       	nop
		{
			_delay_ms(10);
			if((PINA & (1<<Gain_200)) == 0)
 496:	cf 9b       	sbis	0x19, 7	; 25
			{
				Diff_200();
 498:	0e 94 bf 01 	call	0x37e	; 0x37e <Diff_200>
			}
		}
	
		if((PINA & (1<<Gain_10)) == 0)
 49c:	ce 99       	sbic	0x19, 6	; 25
 49e:	09 c0       	rjmp	.+18     	; 0x4b2 <__stack+0x53>
 4a0:	8f e1       	ldi	r24, 0x1F	; 31
 4a2:	9e e4       	ldi	r25, 0x4E	; 78
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <__stack+0x45>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <__stack+0x4b>
 4aa:	00 00       	nop
		{
			_delay_ms(10);
			if((PINA & (1<<Gain_10)) == 0)
 4ac:	ce 9b       	sbis	0x19, 6	; 25
			{
			Diff_10();
 4ae:	0e 94 42 01 	call	0x284	; 0x284 <Diff_10>
			}
		}
		
		if((PINA & (1<<Gain_1)) == 0)
 4b2:	cd 99       	sbic	0x19, 5	; 25
 4b4:	e8 cf       	rjmp	.-48     	; 0x486 <__stack+0x27>
 4b6:	8f e1       	ldi	r24, 0x1F	; 31
 4b8:	9e e4       	ldi	r25, 0x4E	; 78
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <__stack+0x5b>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <__stack+0x61>
 4c0:	00 00       	nop
		{
			_delay_ms(10);
			if((PINA & (1<<Gain_1)) == 0)
 4c2:	cd 99       	sbic	0x19, 5	; 25
 4c4:	e0 cf       	rjmp	.-64     	; 0x486 <__stack+0x27>
			{
				Diff_1();
 4c6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Diff_1>

000004ca <main>:
void Diff_10();
void Diff_200();

int main(void)
{
    LCD_com_DDR |= (1<<RS)|(1<<EN)|(1<<RW);
 4ca:	87 b3       	in	r24, 0x17	; 23
 4cc:	80 6e       	ori	r24, 0xE0	; 224
 4ce:	87 bb       	out	0x17, r24	; 23
	LCD_data_DDR = 0xFF;
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	81 bb       	out	0x11, r24	; 17
	
	BUTTON_DDR |= (0<<Single_mode)|(0<<Diff_mode)|(0<<Gain_1)|(0<<Gain_10)|(0<<Gain_200);
 4d4:	8a b3       	in	r24, 0x1a	; 26
 4d6:	8a bb       	out	0x1a, r24	; 26
	BUTTON_PORT |= (1<<Single_mode)|(1<<Diff_mode)|(1<<Gain_1)|(1<<Gain_10)|(1<<Gain_200);
 4d8:	8b b3       	in	r24, 0x1b	; 27
 4da:	88 6f       	ori	r24, 0xF8	; 248
 4dc:	8b bb       	out	0x1b, r24	; 27
	
	LCD_com(0x38);
 4de:	88 e3       	ldi	r24, 0x38	; 56
 4e0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_com(0x0E);
 4e4:	8e e0       	ldi	r24, 0x0E	; 14
 4e6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_com(0x01);
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	
	LCD_com(0X83);
 4f0:	83 e8       	ldi	r24, 0x83	; 131
 4f2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("ESD Project");
 4f6:	8c ea       	ldi	r24, 0xAC	; 172
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	LCD_com(0xC4);
 4fe:	84 ec       	ldi	r24, 0xC4	; 196
 500:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Voltmeter");
 504:	88 eb       	ldi	r24, 0xB8	; 184
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
 50c:	2f ef       	ldi	r18, 0xFF	; 255
 50e:	80 e7       	ldi	r24, 0x70	; 112
 510:	92 e0       	ldi	r25, 0x02	; 2
 512:	21 50       	subi	r18, 0x01	; 1
 514:	80 40       	sbci	r24, 0x00	; 0
 516:	90 40       	sbci	r25, 0x00	; 0
 518:	e1 f7       	brne	.-8      	; 0x512 <main+0x48>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <main+0x52>
 51c:	00 00       	nop
	_delay_ms(100);


	
	LCD_com(0x01);
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_com(0x80);
 524:	80 e8       	ldi	r24, 0x80	; 128
 526:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Click the button");
 52a:	82 ec       	ldi	r24, 0xC2	; 194
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	LCD_com(0xC0);
 532:	80 ec       	ldi	r24, 0xC0	; 192
 534:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("to select mode!");
 538:	83 ed       	ldi	r24, 0xD3	; 211
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
 540:	2f ef       	ldi	r18, 0xFF	; 255
 542:	80 e7       	ldi	r24, 0x70	; 112
 544:	92 e0       	ldi	r25, 0x02	; 2
 546:	21 50       	subi	r18, 0x01	; 1
 548:	80 40       	sbci	r24, 0x00	; 0
 54a:	90 40       	sbci	r25, 0x00	; 0
 54c:	e1 f7       	brne	.-8      	; 0x546 <main+0x7c>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <main+0x86>
 550:	00 00       	nop
	_delay_ms(100);
	
	LCD_com(0x01);
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Single");
 558:	83 ee       	ldi	r24, 0xE3	; 227
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	LCD_com(0xC0);
 560:	80 ec       	ldi	r24, 0xC0	; 192
 562:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Differential");
 566:	8a ee       	ldi	r24, 0xEA	; 234
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	
    while (1) 
    {
		if((PINA & (1<<Diff_mode)) == 0)
 56e:	cc 99       	sbic	0x19, 4	; 25
 570:	09 c0       	rjmp	.+18     	; 0x584 <main+0xba>
 572:	8f e1       	ldi	r24, 0x1F	; 31
 574:	9e e4       	ldi	r25, 0x4E	; 78
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <main+0xac>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <main+0xb2>
 57c:	00 00       	nop
		{
			_delay_ms(10);
			if((PINA & (1<<Diff_mode)) == 0)
 57e:	cc 9b       	sbis	0x19, 4	; 25
			Diff();
 580:	0e 94 2c 02 	call	0x458	; 0x458 <Diff>
		}
		
		if((PINA & (1<<Single_mode)) == 0)
 584:	cb 99       	sbic	0x19, 3	; 25
 586:	f3 cf       	rjmp	.-26     	; 0x56e <main+0xa4>
 588:	8f e1       	ldi	r24, 0x1F	; 31
 58a:	9e e4       	ldi	r25, 0x4E	; 78
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <main+0xc2>
 590:	00 c0       	rjmp	.+0      	; 0x592 <main+0xc8>
 592:	00 00       	nop
		{
			_delay_ms(10);
			if((PINA & (1<<Single_mode)) == 0)
 594:	cb 99       	sbic	0x19, 3	; 25
 596:	eb cf       	rjmp	.-42     	; 0x56e <main+0xa4>
			Single();
 598:	0e 94 8b 00 	call	0x116	; 0x116 <Single>

0000059c <__cmpsf2>:
 59c:	0e 94 46 03 	call	0x68c	; 0x68c <__fp_cmp>
 5a0:	08 f4       	brcc	.+2      	; 0x5a4 <__cmpsf2+0x8>
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	08 95       	ret

000005a6 <__fixsfsi>:
 5a6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__fixunssfsi>
 5aa:	68 94       	set
 5ac:	b1 11       	cpse	r27, r1
 5ae:	0c 94 8d 03 	jmp	0x71a	; 0x71a <__fp_szero>
 5b2:	08 95       	ret

000005b4 <__fixunssfsi>:
 5b4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__fp_splitA>
 5b8:	88 f0       	brcs	.+34     	; 0x5dc <__fixunssfsi+0x28>
 5ba:	9f 57       	subi	r25, 0x7F	; 127
 5bc:	98 f0       	brcs	.+38     	; 0x5e4 <__fixunssfsi+0x30>
 5be:	b9 2f       	mov	r27, r25
 5c0:	99 27       	eor	r25, r25
 5c2:	b7 51       	subi	r27, 0x17	; 23
 5c4:	b0 f0       	brcs	.+44     	; 0x5f2 <__fixunssfsi+0x3e>
 5c6:	e1 f0       	breq	.+56     	; 0x600 <__fixunssfsi+0x4c>
 5c8:	66 0f       	add	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	88 1f       	adc	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	1a f0       	brmi	.+6      	; 0x5d8 <__fixunssfsi+0x24>
 5d2:	ba 95       	dec	r27
 5d4:	c9 f7       	brne	.-14     	; 0x5c8 <__fixunssfsi+0x14>
 5d6:	14 c0       	rjmp	.+40     	; 0x600 <__fixunssfsi+0x4c>
 5d8:	b1 30       	cpi	r27, 0x01	; 1
 5da:	91 f0       	breq	.+36     	; 0x600 <__fixunssfsi+0x4c>
 5dc:	0e 94 8c 03 	call	0x718	; 0x718 <__fp_zero>
 5e0:	b1 e0       	ldi	r27, 0x01	; 1
 5e2:	08 95       	ret
 5e4:	0c 94 8c 03 	jmp	0x718	; 0x718 <__fp_zero>
 5e8:	67 2f       	mov	r22, r23
 5ea:	78 2f       	mov	r23, r24
 5ec:	88 27       	eor	r24, r24
 5ee:	b8 5f       	subi	r27, 0xF8	; 248
 5f0:	39 f0       	breq	.+14     	; 0x600 <__fixunssfsi+0x4c>
 5f2:	b9 3f       	cpi	r27, 0xF9	; 249
 5f4:	cc f3       	brlt	.-14     	; 0x5e8 <__fixunssfsi+0x34>
 5f6:	86 95       	lsr	r24
 5f8:	77 95       	ror	r23
 5fa:	67 95       	ror	r22
 5fc:	b3 95       	inc	r27
 5fe:	d9 f7       	brne	.-10     	; 0x5f6 <__fixunssfsi+0x42>
 600:	3e f4       	brtc	.+14     	; 0x610 <__fixunssfsi+0x5c>
 602:	90 95       	com	r25
 604:	80 95       	com	r24
 606:	70 95       	com	r23
 608:	61 95       	neg	r22
 60a:	7f 4f       	sbci	r23, 0xFF	; 255
 60c:	8f 4f       	sbci	r24, 0xFF	; 255
 60e:	9f 4f       	sbci	r25, 0xFF	; 255
 610:	08 95       	ret

00000612 <__floatunsisf>:
 612:	e8 94       	clt
 614:	09 c0       	rjmp	.+18     	; 0x628 <__floatsisf+0x12>

00000616 <__floatsisf>:
 616:	97 fb       	bst	r25, 7
 618:	3e f4       	brtc	.+14     	; 0x628 <__floatsisf+0x12>
 61a:	90 95       	com	r25
 61c:	80 95       	com	r24
 61e:	70 95       	com	r23
 620:	61 95       	neg	r22
 622:	7f 4f       	sbci	r23, 0xFF	; 255
 624:	8f 4f       	sbci	r24, 0xFF	; 255
 626:	9f 4f       	sbci	r25, 0xFF	; 255
 628:	99 23       	and	r25, r25
 62a:	a9 f0       	breq	.+42     	; 0x656 <__floatsisf+0x40>
 62c:	f9 2f       	mov	r31, r25
 62e:	96 e9       	ldi	r25, 0x96	; 150
 630:	bb 27       	eor	r27, r27
 632:	93 95       	inc	r25
 634:	f6 95       	lsr	r31
 636:	87 95       	ror	r24
 638:	77 95       	ror	r23
 63a:	67 95       	ror	r22
 63c:	b7 95       	ror	r27
 63e:	f1 11       	cpse	r31, r1
 640:	f8 cf       	rjmp	.-16     	; 0x632 <__floatsisf+0x1c>
 642:	fa f4       	brpl	.+62     	; 0x682 <__floatsisf+0x6c>
 644:	bb 0f       	add	r27, r27
 646:	11 f4       	brne	.+4      	; 0x64c <__floatsisf+0x36>
 648:	60 ff       	sbrs	r22, 0
 64a:	1b c0       	rjmp	.+54     	; 0x682 <__floatsisf+0x6c>
 64c:	6f 5f       	subi	r22, 0xFF	; 255
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	8f 4f       	sbci	r24, 0xFF	; 255
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	16 c0       	rjmp	.+44     	; 0x682 <__floatsisf+0x6c>
 656:	88 23       	and	r24, r24
 658:	11 f0       	breq	.+4      	; 0x65e <__floatsisf+0x48>
 65a:	96 e9       	ldi	r25, 0x96	; 150
 65c:	11 c0       	rjmp	.+34     	; 0x680 <__floatsisf+0x6a>
 65e:	77 23       	and	r23, r23
 660:	21 f0       	breq	.+8      	; 0x66a <__floatsisf+0x54>
 662:	9e e8       	ldi	r25, 0x8E	; 142
 664:	87 2f       	mov	r24, r23
 666:	76 2f       	mov	r23, r22
 668:	05 c0       	rjmp	.+10     	; 0x674 <__floatsisf+0x5e>
 66a:	66 23       	and	r22, r22
 66c:	71 f0       	breq	.+28     	; 0x68a <__floatsisf+0x74>
 66e:	96 e8       	ldi	r25, 0x86	; 134
 670:	86 2f       	mov	r24, r22
 672:	70 e0       	ldi	r23, 0x00	; 0
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	2a f0       	brmi	.+10     	; 0x682 <__floatsisf+0x6c>
 678:	9a 95       	dec	r25
 67a:	66 0f       	add	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	88 1f       	adc	r24, r24
 680:	da f7       	brpl	.-10     	; 0x678 <__floatsisf+0x62>
 682:	88 0f       	add	r24, r24
 684:	96 95       	lsr	r25
 686:	87 95       	ror	r24
 688:	97 f9       	bld	r25, 7
 68a:	08 95       	ret

0000068c <__fp_cmp>:
 68c:	99 0f       	add	r25, r25
 68e:	00 08       	sbc	r0, r0
 690:	55 0f       	add	r21, r21
 692:	aa 0b       	sbc	r26, r26
 694:	e0 e8       	ldi	r30, 0x80	; 128
 696:	fe ef       	ldi	r31, 0xFE	; 254
 698:	16 16       	cp	r1, r22
 69a:	17 06       	cpc	r1, r23
 69c:	e8 07       	cpc	r30, r24
 69e:	f9 07       	cpc	r31, r25
 6a0:	c0 f0       	brcs	.+48     	; 0x6d2 <__fp_cmp+0x46>
 6a2:	12 16       	cp	r1, r18
 6a4:	13 06       	cpc	r1, r19
 6a6:	e4 07       	cpc	r30, r20
 6a8:	f5 07       	cpc	r31, r21
 6aa:	98 f0       	brcs	.+38     	; 0x6d2 <__fp_cmp+0x46>
 6ac:	62 1b       	sub	r22, r18
 6ae:	73 0b       	sbc	r23, r19
 6b0:	84 0b       	sbc	r24, r20
 6b2:	95 0b       	sbc	r25, r21
 6b4:	39 f4       	brne	.+14     	; 0x6c4 <__fp_cmp+0x38>
 6b6:	0a 26       	eor	r0, r26
 6b8:	61 f0       	breq	.+24     	; 0x6d2 <__fp_cmp+0x46>
 6ba:	23 2b       	or	r18, r19
 6bc:	24 2b       	or	r18, r20
 6be:	25 2b       	or	r18, r21
 6c0:	21 f4       	brne	.+8      	; 0x6ca <__fp_cmp+0x3e>
 6c2:	08 95       	ret
 6c4:	0a 26       	eor	r0, r26
 6c6:	09 f4       	brne	.+2      	; 0x6ca <__fp_cmp+0x3e>
 6c8:	a1 40       	sbci	r26, 0x01	; 1
 6ca:	a6 95       	lsr	r26
 6cc:	8f ef       	ldi	r24, 0xFF	; 255
 6ce:	81 1d       	adc	r24, r1
 6d0:	81 1d       	adc	r24, r1
 6d2:	08 95       	ret

000006d4 <__fp_split3>:
 6d4:	57 fd       	sbrc	r21, 7
 6d6:	90 58       	subi	r25, 0x80	; 128
 6d8:	44 0f       	add	r20, r20
 6da:	55 1f       	adc	r21, r21
 6dc:	59 f0       	breq	.+22     	; 0x6f4 <__fp_splitA+0x10>
 6de:	5f 3f       	cpi	r21, 0xFF	; 255
 6e0:	71 f0       	breq	.+28     	; 0x6fe <__fp_splitA+0x1a>
 6e2:	47 95       	ror	r20

000006e4 <__fp_splitA>:
 6e4:	88 0f       	add	r24, r24
 6e6:	97 fb       	bst	r25, 7
 6e8:	99 1f       	adc	r25, r25
 6ea:	61 f0       	breq	.+24     	; 0x704 <__fp_splitA+0x20>
 6ec:	9f 3f       	cpi	r25, 0xFF	; 255
 6ee:	79 f0       	breq	.+30     	; 0x70e <__fp_splitA+0x2a>
 6f0:	87 95       	ror	r24
 6f2:	08 95       	ret
 6f4:	12 16       	cp	r1, r18
 6f6:	13 06       	cpc	r1, r19
 6f8:	14 06       	cpc	r1, r20
 6fa:	55 1f       	adc	r21, r21
 6fc:	f2 cf       	rjmp	.-28     	; 0x6e2 <__fp_split3+0xe>
 6fe:	46 95       	lsr	r20
 700:	f1 df       	rcall	.-30     	; 0x6e4 <__fp_splitA>
 702:	08 c0       	rjmp	.+16     	; 0x714 <__fp_splitA+0x30>
 704:	16 16       	cp	r1, r22
 706:	17 06       	cpc	r1, r23
 708:	18 06       	cpc	r1, r24
 70a:	99 1f       	adc	r25, r25
 70c:	f1 cf       	rjmp	.-30     	; 0x6f0 <__fp_splitA+0xc>
 70e:	86 95       	lsr	r24
 710:	71 05       	cpc	r23, r1
 712:	61 05       	cpc	r22, r1
 714:	08 94       	sec
 716:	08 95       	ret

00000718 <__fp_zero>:
 718:	e8 94       	clt

0000071a <__fp_szero>:
 71a:	bb 27       	eor	r27, r27
 71c:	66 27       	eor	r22, r22
 71e:	77 27       	eor	r23, r23
 720:	cb 01       	movw	r24, r22
 722:	97 f9       	bld	r25, 7
 724:	08 95       	ret

00000726 <__mulsf3>:
 726:	0e 94 a6 03 	call	0x74c	; 0x74c <__mulsf3x>
 72a:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_round>
 72e:	0e 94 09 04 	call	0x812	; 0x812 <__fp_pscA>
 732:	38 f0       	brcs	.+14     	; 0x742 <__mulsf3+0x1c>
 734:	0e 94 10 04 	call	0x820	; 0x820 <__fp_pscB>
 738:	20 f0       	brcs	.+8      	; 0x742 <__mulsf3+0x1c>
 73a:	95 23       	and	r25, r21
 73c:	11 f0       	breq	.+4      	; 0x742 <__mulsf3+0x1c>
 73e:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_inf>
 742:	0c 94 06 04 	jmp	0x80c	; 0x80c <__fp_nan>
 746:	11 24       	eor	r1, r1
 748:	0c 94 8d 03 	jmp	0x71a	; 0x71a <__fp_szero>

0000074c <__mulsf3x>:
 74c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__fp_split3>
 750:	70 f3       	brcs	.-36     	; 0x72e <__mulsf3+0x8>

00000752 <__mulsf3_pse>:
 752:	95 9f       	mul	r25, r21
 754:	c1 f3       	breq	.-16     	; 0x746 <__mulsf3+0x20>
 756:	95 0f       	add	r25, r21
 758:	50 e0       	ldi	r21, 0x00	; 0
 75a:	55 1f       	adc	r21, r21
 75c:	62 9f       	mul	r22, r18
 75e:	f0 01       	movw	r30, r0
 760:	72 9f       	mul	r23, r18
 762:	bb 27       	eor	r27, r27
 764:	f0 0d       	add	r31, r0
 766:	b1 1d       	adc	r27, r1
 768:	63 9f       	mul	r22, r19
 76a:	aa 27       	eor	r26, r26
 76c:	f0 0d       	add	r31, r0
 76e:	b1 1d       	adc	r27, r1
 770:	aa 1f       	adc	r26, r26
 772:	64 9f       	mul	r22, r20
 774:	66 27       	eor	r22, r22
 776:	b0 0d       	add	r27, r0
 778:	a1 1d       	adc	r26, r1
 77a:	66 1f       	adc	r22, r22
 77c:	82 9f       	mul	r24, r18
 77e:	22 27       	eor	r18, r18
 780:	b0 0d       	add	r27, r0
 782:	a1 1d       	adc	r26, r1
 784:	62 1f       	adc	r22, r18
 786:	73 9f       	mul	r23, r19
 788:	b0 0d       	add	r27, r0
 78a:	a1 1d       	adc	r26, r1
 78c:	62 1f       	adc	r22, r18
 78e:	83 9f       	mul	r24, r19
 790:	a0 0d       	add	r26, r0
 792:	61 1d       	adc	r22, r1
 794:	22 1f       	adc	r18, r18
 796:	74 9f       	mul	r23, r20
 798:	33 27       	eor	r19, r19
 79a:	a0 0d       	add	r26, r0
 79c:	61 1d       	adc	r22, r1
 79e:	23 1f       	adc	r18, r19
 7a0:	84 9f       	mul	r24, r20
 7a2:	60 0d       	add	r22, r0
 7a4:	21 1d       	adc	r18, r1
 7a6:	82 2f       	mov	r24, r18
 7a8:	76 2f       	mov	r23, r22
 7aa:	6a 2f       	mov	r22, r26
 7ac:	11 24       	eor	r1, r1
 7ae:	9f 57       	subi	r25, 0x7F	; 127
 7b0:	50 40       	sbci	r21, 0x00	; 0
 7b2:	9a f0       	brmi	.+38     	; 0x7da <__mulsf3_pse+0x88>
 7b4:	f1 f0       	breq	.+60     	; 0x7f2 <__mulsf3_pse+0xa0>
 7b6:	88 23       	and	r24, r24
 7b8:	4a f0       	brmi	.+18     	; 0x7cc <__mulsf3_pse+0x7a>
 7ba:	ee 0f       	add	r30, r30
 7bc:	ff 1f       	adc	r31, r31
 7be:	bb 1f       	adc	r27, r27
 7c0:	66 1f       	adc	r22, r22
 7c2:	77 1f       	adc	r23, r23
 7c4:	88 1f       	adc	r24, r24
 7c6:	91 50       	subi	r25, 0x01	; 1
 7c8:	50 40       	sbci	r21, 0x00	; 0
 7ca:	a9 f7       	brne	.-22     	; 0x7b6 <__mulsf3_pse+0x64>
 7cc:	9e 3f       	cpi	r25, 0xFE	; 254
 7ce:	51 05       	cpc	r21, r1
 7d0:	80 f0       	brcs	.+32     	; 0x7f2 <__mulsf3_pse+0xa0>
 7d2:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_inf>
 7d6:	0c 94 8d 03 	jmp	0x71a	; 0x71a <__fp_szero>
 7da:	5f 3f       	cpi	r21, 0xFF	; 255
 7dc:	e4 f3       	brlt	.-8      	; 0x7d6 <__mulsf3_pse+0x84>
 7de:	98 3e       	cpi	r25, 0xE8	; 232
 7e0:	d4 f3       	brlt	.-12     	; 0x7d6 <__mulsf3_pse+0x84>
 7e2:	86 95       	lsr	r24
 7e4:	77 95       	ror	r23
 7e6:	67 95       	ror	r22
 7e8:	b7 95       	ror	r27
 7ea:	f7 95       	ror	r31
 7ec:	e7 95       	ror	r30
 7ee:	9f 5f       	subi	r25, 0xFF	; 255
 7f0:	c1 f7       	brne	.-16     	; 0x7e2 <__mulsf3_pse+0x90>
 7f2:	fe 2b       	or	r31, r30
 7f4:	88 0f       	add	r24, r24
 7f6:	91 1d       	adc	r25, r1
 7f8:	96 95       	lsr	r25
 7fa:	87 95       	ror	r24
 7fc:	97 f9       	bld	r25, 7
 7fe:	08 95       	ret

00000800 <__fp_inf>:
 800:	97 f9       	bld	r25, 7
 802:	9f 67       	ori	r25, 0x7F	; 127
 804:	80 e8       	ldi	r24, 0x80	; 128
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	08 95       	ret

0000080c <__fp_nan>:
 80c:	9f ef       	ldi	r25, 0xFF	; 255
 80e:	80 ec       	ldi	r24, 0xC0	; 192
 810:	08 95       	ret

00000812 <__fp_pscA>:
 812:	00 24       	eor	r0, r0
 814:	0a 94       	dec	r0
 816:	16 16       	cp	r1, r22
 818:	17 06       	cpc	r1, r23
 81a:	18 06       	cpc	r1, r24
 81c:	09 06       	cpc	r0, r25
 81e:	08 95       	ret

00000820 <__fp_pscB>:
 820:	00 24       	eor	r0, r0
 822:	0a 94       	dec	r0
 824:	12 16       	cp	r1, r18
 826:	13 06       	cpc	r1, r19
 828:	14 06       	cpc	r1, r20
 82a:	05 06       	cpc	r0, r21
 82c:	08 95       	ret

0000082e <__fp_round>:
 82e:	09 2e       	mov	r0, r25
 830:	03 94       	inc	r0
 832:	00 0c       	add	r0, r0
 834:	11 f4       	brne	.+4      	; 0x83a <__fp_round+0xc>
 836:	88 23       	and	r24, r24
 838:	52 f0       	brmi	.+20     	; 0x84e <__fp_round+0x20>
 83a:	bb 0f       	add	r27, r27
 83c:	40 f4       	brcc	.+16     	; 0x84e <__fp_round+0x20>
 83e:	bf 2b       	or	r27, r31
 840:	11 f4       	brne	.+4      	; 0x846 <__fp_round+0x18>
 842:	60 ff       	sbrs	r22, 0
 844:	04 c0       	rjmp	.+8      	; 0x84e <__fp_round+0x20>
 846:	6f 5f       	subi	r22, 0xFF	; 255
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	08 95       	ret

00000850 <__divmodhi4>:
 850:	97 fb       	bst	r25, 7
 852:	07 2e       	mov	r0, r23
 854:	16 f4       	brtc	.+4      	; 0x85a <__divmodhi4+0xa>
 856:	00 94       	com	r0
 858:	07 d0       	rcall	.+14     	; 0x868 <__divmodhi4_neg1>
 85a:	77 fd       	sbrc	r23, 7
 85c:	09 d0       	rcall	.+18     	; 0x870 <__divmodhi4_neg2>
 85e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__udivmodhi4>
 862:	07 fc       	sbrc	r0, 7
 864:	05 d0       	rcall	.+10     	; 0x870 <__divmodhi4_neg2>
 866:	3e f4       	brtc	.+14     	; 0x876 <__divmodhi4_exit>

00000868 <__divmodhi4_neg1>:
 868:	90 95       	com	r25
 86a:	81 95       	neg	r24
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	08 95       	ret

00000870 <__divmodhi4_neg2>:
 870:	70 95       	com	r23
 872:	61 95       	neg	r22
 874:	7f 4f       	sbci	r23, 0xFF	; 255

00000876 <__divmodhi4_exit>:
 876:	08 95       	ret

00000878 <__divmodsi4>:
 878:	05 2e       	mov	r0, r21
 87a:	97 fb       	bst	r25, 7
 87c:	1e f4       	brtc	.+6      	; 0x884 <__divmodsi4+0xc>
 87e:	00 94       	com	r0
 880:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__negsi2>
 884:	57 fd       	sbrc	r21, 7
 886:	07 d0       	rcall	.+14     	; 0x896 <__divmodsi4_neg2>
 888:	0e 94 6f 04 	call	0x8de	; 0x8de <__udivmodsi4>
 88c:	07 fc       	sbrc	r0, 7
 88e:	03 d0       	rcall	.+6      	; 0x896 <__divmodsi4_neg2>
 890:	4e f4       	brtc	.+18     	; 0x8a4 <__divmodsi4_exit>
 892:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__negsi2>

00000896 <__divmodsi4_neg2>:
 896:	50 95       	com	r21
 898:	40 95       	com	r20
 89a:	30 95       	com	r19
 89c:	21 95       	neg	r18
 89e:	3f 4f       	sbci	r19, 0xFF	; 255
 8a0:	4f 4f       	sbci	r20, 0xFF	; 255
 8a2:	5f 4f       	sbci	r21, 0xFF	; 255

000008a4 <__divmodsi4_exit>:
 8a4:	08 95       	ret

000008a6 <__negsi2>:
 8a6:	90 95       	com	r25
 8a8:	80 95       	com	r24
 8aa:	70 95       	com	r23
 8ac:	61 95       	neg	r22
 8ae:	7f 4f       	sbci	r23, 0xFF	; 255
 8b0:	8f 4f       	sbci	r24, 0xFF	; 255
 8b2:	9f 4f       	sbci	r25, 0xFF	; 255
 8b4:	08 95       	ret

000008b6 <__udivmodhi4>:
 8b6:	aa 1b       	sub	r26, r26
 8b8:	bb 1b       	sub	r27, r27
 8ba:	51 e1       	ldi	r21, 0x11	; 17
 8bc:	07 c0       	rjmp	.+14     	; 0x8cc <__udivmodhi4_ep>

000008be <__udivmodhi4_loop>:
 8be:	aa 1f       	adc	r26, r26
 8c0:	bb 1f       	adc	r27, r27
 8c2:	a6 17       	cp	r26, r22
 8c4:	b7 07       	cpc	r27, r23
 8c6:	10 f0       	brcs	.+4      	; 0x8cc <__udivmodhi4_ep>
 8c8:	a6 1b       	sub	r26, r22
 8ca:	b7 0b       	sbc	r27, r23

000008cc <__udivmodhi4_ep>:
 8cc:	88 1f       	adc	r24, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	5a 95       	dec	r21
 8d2:	a9 f7       	brne	.-22     	; 0x8be <__udivmodhi4_loop>
 8d4:	80 95       	com	r24
 8d6:	90 95       	com	r25
 8d8:	bc 01       	movw	r22, r24
 8da:	cd 01       	movw	r24, r26
 8dc:	08 95       	ret

000008de <__udivmodsi4>:
 8de:	a1 e2       	ldi	r26, 0x21	; 33
 8e0:	1a 2e       	mov	r1, r26
 8e2:	aa 1b       	sub	r26, r26
 8e4:	bb 1b       	sub	r27, r27
 8e6:	fd 01       	movw	r30, r26
 8e8:	0d c0       	rjmp	.+26     	; 0x904 <__udivmodsi4_ep>

000008ea <__udivmodsi4_loop>:
 8ea:	aa 1f       	adc	r26, r26
 8ec:	bb 1f       	adc	r27, r27
 8ee:	ee 1f       	adc	r30, r30
 8f0:	ff 1f       	adc	r31, r31
 8f2:	a2 17       	cp	r26, r18
 8f4:	b3 07       	cpc	r27, r19
 8f6:	e4 07       	cpc	r30, r20
 8f8:	f5 07       	cpc	r31, r21
 8fa:	20 f0       	brcs	.+8      	; 0x904 <__udivmodsi4_ep>
 8fc:	a2 1b       	sub	r26, r18
 8fe:	b3 0b       	sbc	r27, r19
 900:	e4 0b       	sbc	r30, r20
 902:	f5 0b       	sbc	r31, r21

00000904 <__udivmodsi4_ep>:
 904:	66 1f       	adc	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	88 1f       	adc	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	1a 94       	dec	r1
 90e:	69 f7       	brne	.-38     	; 0x8ea <__udivmodsi4_loop>
 910:	60 95       	com	r22
 912:	70 95       	com	r23
 914:	80 95       	com	r24
 916:	90 95       	com	r25
 918:	9b 01       	movw	r18, r22
 91a:	ac 01       	movw	r20, r24
 91c:	bd 01       	movw	r22, r26
 91e:	cf 01       	movw	r24, r30
 920:	08 95       	ret

00000922 <_exit>:
 922:	f8 94       	cli

00000924 <__stop_program>:
 924:	ff cf       	rjmp	.-2      	; 0x924 <__stop_program>
