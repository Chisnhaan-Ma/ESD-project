
Voltmetter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000008f8  0000096c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001068  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c7  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000671  00000000  00000000  000021ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00002870  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038c  00000000  00000000  00002928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000054f  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00003203  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3f       	cpi	r26, 0xF6	; 246
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4e 02 	call	0x49c	; 0x49c <main>
  7a:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_com>:
	}
}

void LCD_com(unsigned char	cmnd)
{
	LCD_com_PORT &= ~(1<<RW);
  82:	98 b3       	in	r25, 0x18	; 24
  84:	9f 7b       	andi	r25, 0xBF	; 191
  86:	98 bb       	out	0x18, r25	; 24
	LCD_com_PORT &= ~(1<<RS);
  88:	98 b3       	in	r25, 0x18	; 24
  8a:	9f 7d       	andi	r25, 0xDF	; 223
  8c:	98 bb       	out	0x18, r25	; 24
	LCD_data_PORT = cmnd;
  8e:	82 bb       	out	0x12, r24	; 18
	LCD_com_PORT |= (1<<EN);
  90:	88 b3       	in	r24, 0x18	; 24
  92:	80 68       	ori	r24, 0x80	; 128
  94:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8f ec       	ldi	r24, 0xCF	; 207
  98:	97 e0       	ldi	r25, 0x07	; 7
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_com+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_com+0x1e>
  a0:	00 00       	nop
	_delay_ms(1);
	LCD_com_PORT &= ~(1<<EN);
  a2:	88 b3       	in	r24, 0x18	; 24
  a4:	8f 77       	andi	r24, 0x7F	; 127
  a6:	88 bb       	out	0x18, r24	; 24
  a8:	8f e0       	ldi	r24, 0x0F	; 15
  aa:	97 e2       	ldi	r25, 0x27	; 39
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_com+0x2a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_com+0x30>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <LCD_char>:
	_delay_ms(5);
}

void LCD_char(unsigned char char_data)
{
		LCD_com_PORT &= ~(1<<RW);
  b6:	98 b3       	in	r25, 0x18	; 24
  b8:	9f 7b       	andi	r25, 0xBF	; 191
  ba:	98 bb       	out	0x18, r25	; 24
		LCD_com_PORT |= (1<<RS);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	90 62       	ori	r25, 0x20	; 32
  c0:	98 bb       	out	0x18, r25	; 24
		LCD_data_PORT = char_data;
  c2:	82 bb       	out	0x12, r24	; 18
		LCD_com_PORT |= (1<<EN);
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	8f ec       	ldi	r24, 0xCF	; 207
  cc:	97 e0       	ldi	r25, 0x07	; 7
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_char+0x18>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_char+0x1e>
  d4:	00 00       	nop
		_delay_ms(1);
		LCD_com_PORT &= ~(1<<EN);
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	88 bb       	out	0x18, r24	; 24
  dc:	8f e0       	ldi	r24, 0x0F	; 15
  de:	97 e2       	ldi	r25, 0x27	; 39
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_char+0x2a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_char+0x30>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <LCD_string>:
		_delay_ms(5);
}

void LCD_string(char *str)
{
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	8c 01       	movw	r16, r24
	int i;
	for(i = 0; str[i]!=0;i++)
  f4:	c0 e0       	ldi	r28, 0x00	; 0
  f6:	d0 e0       	ldi	r29, 0x00	; 0
  f8:	03 c0       	rjmp	.+6      	; 0x100 <LCD_string+0x16>
	{
		LCD_char(str[i]);
  fa:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
}

void LCD_string(char *str)
{
	int i;
	for(i = 0; str[i]!=0;i++)
  fe:	21 96       	adiw	r28, 0x01	; 1
 100:	f8 01       	movw	r30, r16
 102:	ec 0f       	add	r30, r28
 104:	fd 1f       	adc	r31, r29
 106:	80 81       	ld	r24, Z
 108:	81 11       	cpse	r24, r1
 10a:	f7 cf       	rjmp	.-18     	; 0xfa <LCD_string+0x10>
	{
		LCD_char(str[i]);
	}
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <Single>:

void Single()
{
	float  Vin;
	int V, V1, V2, V3, V4;
	LCD_com(0x01);
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Single mode");
 11c:	80 e6       	ldi	r24, 0x60	; 96
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	while(1)
	{
	ADMUX |= (1<<REFS0);
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 64       	ori	r24, 0x40	; 64
 128:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADATE) |(1<<ADPS2) |(1<<ADPS1)|(1<<ADPS0);
 12a:	86 b1       	in	r24, 0x06	; 6
 12c:	87 6e       	ori	r24, 0xE7	; 231
 12e:	86 b9       	out	0x06, r24	; 6
	SFIOR |= 0;
 130:	80 b7       	in	r24, 0x30	; 48
 132:	80 bf       	out	0x30, r24	; 48
	while(!(ADCSRA & (1<<ADIF)));
 134:	34 9b       	sbis	0x06, 4	; 6
 136:	fe cf       	rjmp	.-4      	; 0x134 <Single+0x1e>
	ADCSRA |= (1<<ADIF);
 138:	86 b1       	in	r24, 0x06	; 6
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	86 b9       	out	0x06, r24	; 6
	Vin = (ADC*4.8828);
 13e:	64 b1       	in	r22, 0x04	; 4
 140:	75 b1       	in	r23, 0x05	; 5
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__floatunsisf>
 14a:	26 ee       	ldi	r18, 0xE6	; 230
 14c:	3f e3       	ldi	r19, 0x3F	; 63
 14e:	4c e9       	ldi	r20, 0x9C	; 156
 150:	50 e4       	ldi	r21, 0x40	; 64
 152:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3>
	V = Vin;
 156:	0e 94 bc 02 	call	0x578	; 0x578 <__fixsfsi>
	V1 = (V/1000);
 15a:	cb 01       	movw	r24, r22
 15c:	68 ee       	ldi	r22, 0xE8	; 232
 15e:	73 e0       	ldi	r23, 0x03	; 3
 160:	0e 94 11 04 	call	0x822	; 0x822 <__divmodhi4>
 164:	06 2f       	mov	r16, r22
	V2 = (V%1000)/100;
 166:	64 e6       	ldi	r22, 0x64	; 100
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	0e 94 11 04 	call	0x822	; 0x822 <__divmodhi4>
 16e:	16 2f       	mov	r17, r22
	V3 = ((V%1000)%100)/10;
 170:	6a e0       	ldi	r22, 0x0A	; 10
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	0e 94 11 04 	call	0x822	; 0x822 <__divmodhi4>
 178:	d6 2f       	mov	r29, r22
 17a:	c8 2f       	mov	r28, r24
	V4 = (((V%1000)%100))%10;
	LCD_com(0Xc5);
 17c:	85 ec       	ldi	r24, 0xC5	; 197
 17e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_char(V1+0x30);
 182:	80 e3       	ldi	r24, 0x30	; 48
 184:	80 0f       	add	r24, r16
 186:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
	LCD_char(',');
 18a:	8c e2       	ldi	r24, 0x2C	; 44
 18c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
	LCD_char(V2+0x30);
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	81 0f       	add	r24, r17
 194:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
	LCD_char(V3+0x30);
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	8d 0f       	add	r24, r29
 19c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
	LCD_char(V4+0x30);
 1a0:	80 e3       	ldi	r24, 0x30	; 48
 1a2:	8c 0f       	add	r24, r28
 1a4:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
	}
 1a8:	bd cf       	rjmp	.-134    	; 0x124 <Single+0xe>

000001aa <Diff_1>:

void Diff_1()
{
	long double  Vin = 0;
	int V = 0, V1, V2, V3, V4, V5;
	LCD_com(0x01);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Diff x1");
 1b0:	8c e6       	ldi	r24, 0x6C	; 108
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	ADMUX |= (1<<REFS0)|(1<<MUX4);	//vi sai G = 1 PA0(+), PA1(-)
 1b8:	87 b1       	in	r24, 0x07	; 7
 1ba:	80 65       	ori	r24, 0x50	; 80
 1bc:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN)|(1<<ADPS2) |(1<<ADPS1)|(1<<ADPS0);
 1be:	86 b1       	in	r24, 0x06	; 6
 1c0:	87 68       	ori	r24, 0x87	; 135
 1c2:	86 b9       	out	0x06, r24	; 6
	SFIOR |= 0;
 1c4:	80 b7       	in	r24, 0x30	; 48
 1c6:	80 bf       	out	0x30, r24	; 48
	while(1)
	{
		ADCSRA |= (1<<ADSC);
 1c8:	86 b1       	in	r24, 0x06	; 6
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	86 b9       	out	0x06, r24	; 6
		while(!(ADCSRA & (1<<ADIF))); //check co ADIF
 1ce:	34 9b       	sbis	0x06, 4	; 6
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <Diff_1+0x24>
		ADCSRA |= (1<<ADIF);			// xoa co ADIF
 1d2:	86 b1       	in	r24, 0x06	; 6
 1d4:	80 61       	ori	r24, 0x10	; 16
 1d6:	86 b9       	out	0x06, r24	; 6
		Vin = (ADC*4.8828);			// Vin = ADC*5000/512 ;lay 3 so thap phan sau dau phay
 1d8:	64 b1       	in	r22, 0x04	; 4
 1da:	75 b1       	in	r23, 0x05	; 5
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__floatunsisf>
 1e4:	26 ee       	ldi	r18, 0xE6	; 230
 1e6:	3f e3       	ldi	r19, 0x3F	; 63
 1e8:	4c e9       	ldi	r20, 0x9C	; 156
 1ea:	50 e4       	ldi	r21, 0x40	; 64
 1ec:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3>
 1f0:	6b 01       	movw	r12, r22
 1f2:	7c 01       	movw	r14, r24
		
		if(Vin==0)
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	a9 01       	movw	r20, r18
 1fa:	0e 94 b7 02 	call	0x56e	; 0x56e <__cmpsf2>
 1fe:	81 11       	cpse	r24, r1
 200:	08 c0       	rjmp	.+16     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
		{
			LCD_com(0xC0);
 202:	80 ec       	ldi	r24, 0xC0	; 192
 204:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
			LCD_string("nguoc chieu V");
 208:	84 e7       	ldi	r24, 0x74	; 116
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
 210:	db cf       	rjmp	.-74     	; 0x1c8 <Diff_1+0x1e>
		}
		else
		{
			V = Vin;
 212:	c7 01       	movw	r24, r14
 214:	b6 01       	movw	r22, r12
 216:	0e 94 bc 02 	call	0x578	; 0x578 <__fixsfsi>
			V1 = (V/10000);
 21a:	cb 01       	movw	r24, r22
 21c:	60 e1       	ldi	r22, 0x10	; 16
 21e:	77 e2       	ldi	r23, 0x27	; 39
 220:	0e 94 11 04 	call	0x822	; 0x822 <__divmodhi4>
 224:	f6 2e       	mov	r15, r22
			V2 = (V%10000)/1000;
 226:	68 ee       	ldi	r22, 0xE8	; 232
 228:	73 e0       	ldi	r23, 0x03	; 3
 22a:	0e 94 11 04 	call	0x822	; 0x822 <__divmodhi4>
 22e:	06 2f       	mov	r16, r22
			V3 = ((V%10000)%1000)/100;
 230:	64 e6       	ldi	r22, 0x64	; 100
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	0e 94 11 04 	call	0x822	; 0x822 <__divmodhi4>
 238:	16 2f       	mov	r17, r22
			V4 = ((((V%10000)%1000))%100)/10;
 23a:	6a e0       	ldi	r22, 0x0A	; 10
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	0e 94 11 04 	call	0x822	; 0x822 <__divmodhi4>
 242:	d6 2f       	mov	r29, r22
 244:	c8 2f       	mov	r28, r24
			V5 = ((((V%10000)%1000))%100)%10;
			LCD_com(0Xc5);
 246:	85 ec       	ldi	r24, 0xC5	; 197
 248:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
			LCD_char(V1+0x30);
 24c:	80 e3       	ldi	r24, 0x30	; 48
 24e:	8f 0d       	add	r24, r15
 250:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
			LCD_char(V2+0x30);
 254:	80 e3       	ldi	r24, 0x30	; 48
 256:	80 0f       	add	r24, r16
 258:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
			LCD_char(',');
 25c:	8c e2       	ldi	r24, 0x2C	; 44
 25e:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
			LCD_char(V3+0x30);
 262:	80 e3       	ldi	r24, 0x30	; 48
 264:	81 0f       	add	r24, r17
 266:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
			LCD_char(V4+0x30);
 26a:	80 e3       	ldi	r24, 0x30	; 48
 26c:	8d 0f       	add	r24, r29
 26e:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
			LCD_char(V5+0x30);
 272:	80 e3       	ldi	r24, 0x30	; 48
 274:	8c 0f       	add	r24, r28
 276:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
 27a:	a6 cf       	rjmp	.-180    	; 0x1c8 <Diff_1+0x1e>

0000027c <Diff_10>:

void Diff_10()
{
	double  Vin = 0;
	long int V = 0, V1, V2, V3, V4, V5;
	LCD_com(0x01);
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Diff x10");
 282:	82 e8       	ldi	r24, 0x82	; 130
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	ADMUX |= (1<<REFS0)|(1<<MUX4);	//vi sai G = 1 PA0(+), PA1(-)
 28a:	87 b1       	in	r24, 0x07	; 7
 28c:	80 65       	ori	r24, 0x50	; 80
 28e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN)|(1<<ADPS2) |(1<<ADPS1)|(1<<ADPS0);
 290:	86 b1       	in	r24, 0x06	; 6
 292:	87 68       	ori	r24, 0x87	; 135
 294:	86 b9       	out	0x06, r24	; 6
	SFIOR |= 0;
 296:	80 b7       	in	r24, 0x30	; 48
 298:	80 bf       	out	0x30, r24	; 48
	while(1)
	{
		ADCSRA |= (1<<ADSC);
 29a:	86 b1       	in	r24, 0x06	; 6
 29c:	80 64       	ori	r24, 0x40	; 64
 29e:	86 b9       	out	0x06, r24	; 6
		while(!(ADCSRA & (1<<ADIF))); //check co ADIF 
 2a0:	34 9b       	sbis	0x06, 4	; 6
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <Diff_10+0x24>
		ADCSRA |= (1<<ADIF);			// xoa co ADIF
 2a4:	86 b1       	in	r24, 0x06	; 6
 2a6:	80 61       	ori	r24, 0x10	; 16
 2a8:	86 b9       	out	0x06, r24	; 6
		Vin = (ADC*48.828);			// Vin = ADC*5000/512 ;lay 3 so thap phan sau dau phay
 2aa:	64 b1       	in	r22, 0x04	; 4
 2ac:	75 b1       	in	r23, 0x05	; 5
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__floatunsisf>
 2b6:	2f ed       	ldi	r18, 0xDF	; 223
 2b8:	3f e4       	ldi	r19, 0x4F	; 79
 2ba:	43 e4       	ldi	r20, 0x43	; 67
 2bc:	52 e4       	ldi	r21, 0x42	; 66
 2be:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3>
 2c2:	6b 01       	movw	r12, r22
 2c4:	7c 01       	movw	r14, r24
		if(Vin==0)
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	a9 01       	movw	r20, r18
 2cc:	0e 94 b7 02 	call	0x56e	; 0x56e <__cmpsf2>
 2d0:	81 11       	cpse	r24, r1
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <Diff_10+0x68>
			{
				LCD_com(0xC0);
 2d4:	80 ec       	ldi	r24, 0xC0	; 192
 2d6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
				LCD_string("nguoc chieu V");
 2da:	84 e7       	ldi	r24, 0x74	; 116
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
 2e2:	db cf       	rjmp	.-74     	; 0x29a <Diff_10+0x1e>
			}
		else
			{
				V = Vin;
 2e4:	c7 01       	movw	r24, r14
 2e6:	b6 01       	movw	r22, r12
 2e8:	0e 94 bc 02 	call	0x578	; 0x578 <__fixsfsi>
				V1 = (V/10000);
 2ec:	20 e1       	ldi	r18, 0x10	; 16
 2ee:	37 e2       	ldi	r19, 0x27	; 39
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	50 e0       	ldi	r21, 0x00	; 0
 2f4:	0e 94 25 04 	call	0x84a	; 0x84a <__divmodsi4>
 2f8:	f2 2e       	mov	r15, r18
				V2 = (V%10000)/1000;
 2fa:	28 ee       	ldi	r18, 0xE8	; 232
 2fc:	33 e0       	ldi	r19, 0x03	; 3
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	0e 94 25 04 	call	0x84a	; 0x84a <__divmodsi4>
 306:	02 2f       	mov	r16, r18
				V3 = ((V%10000)%1000)/100;
 308:	24 e6       	ldi	r18, 0x64	; 100
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	0e 94 25 04 	call	0x84a	; 0x84a <__divmodsi4>
 314:	12 2f       	mov	r17, r18
				V4 = ((((V%10000)%1000))%100)/10;
 316:	2a e0       	ldi	r18, 0x0A	; 10
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	0e 94 25 04 	call	0x84a	; 0x84a <__divmodsi4>
 322:	d2 2f       	mov	r29, r18
 324:	c6 2f       	mov	r28, r22
				V5 = ((((V%10000)%1000))%100)%10;
				LCD_com(0Xc5);
 326:	85 ec       	ldi	r24, 0xC5	; 197
 328:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
				LCD_char(V1+0x30);
 32c:	80 e3       	ldi	r24, 0x30	; 48
 32e:	8f 0d       	add	r24, r15
 330:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V2+0x30);
 334:	80 e3       	ldi	r24, 0x30	; 48
 336:	80 0f       	add	r24, r16
 338:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(',');
 33c:	8c e2       	ldi	r24, 0x2C	; 44
 33e:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V3+0x30);
 342:	80 e3       	ldi	r24, 0x30	; 48
 344:	81 0f       	add	r24, r17
 346:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V4+0x30);
 34a:	80 e3       	ldi	r24, 0x30	; 48
 34c:	8d 0f       	add	r24, r29
 34e:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V5+0x30);
 352:	80 e3       	ldi	r24, 0x30	; 48
 354:	8c 0f       	add	r24, r28
 356:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
 35a:	9f cf       	rjmp	.-194    	; 0x29a <Diff_10+0x1e>

0000035c <Diff_200>:

void Diff_200()
{
	double  Vin = 0;
	int V = 0, V1, V2, V3, V4, V5; 
	LCD_com(0x01);
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Diff x200");
 362:	8b e8       	ldi	r24, 0x8B	; 139
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	ADMUX |= (1<<REFS0)| (1<<MUX4);
 36a:	87 b1       	in	r24, 0x07	; 7
 36c:	80 65       	ori	r24, 0x50	; 80
 36e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN) |(1<<ADPS2) |(1<<ADPS1);	//mode chuyen doi 1 lan
 370:	86 b1       	in	r24, 0x06	; 6
 372:	86 68       	ori	r24, 0x86	; 134
 374:	86 b9       	out	0x06, r24	; 6
	while(1)
	{
		ADCSRA |= (1<<ADSC);
 376:	86 b1       	in	r24, 0x06	; 6
 378:	80 64       	ori	r24, 0x40	; 64
 37a:	86 b9       	out	0x06, r24	; 6
		while(!(ADCSRA & (1<<ADIF)));
 37c:	34 9b       	sbis	0x06, 4	; 6
 37e:	fe cf       	rjmp	.-4      	; 0x37c <Diff_200+0x20>
		ADCSRA |= (1<<ADIF);
 380:	86 b1       	in	r24, 0x06	; 6
 382:	80 61       	ori	r24, 0x10	; 16
 384:	86 b9       	out	0x06, r24	; 6
		Vin = (ADC*9.765); // Vin = ADC*50/512
 386:	64 b1       	in	r22, 0x04	; 4
 388:	75 b1       	in	r23, 0x05	; 5
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__floatunsisf>
 392:	21 e7       	ldi	r18, 0x71	; 113
 394:	3d e3       	ldi	r19, 0x3D	; 61
 396:	4c e1       	ldi	r20, 0x1C	; 28
 398:	51 e4       	ldi	r21, 0x41	; 65
 39a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3>
 39e:	6b 01       	movw	r12, r22
 3a0:	7c 01       	movw	r14, r24
		if(Vin==0)
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	a9 01       	movw	r20, r18
 3a8:	0e 94 b7 02 	call	0x56e	; 0x56e <__cmpsf2>
 3ac:	81 11       	cpse	r24, r1
 3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <Diff_200+0x64>
			{
				LCD_com(0xC0);
 3b0:	80 ec       	ldi	r24, 0xC0	; 192
 3b2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
				LCD_string("nguoc chieu V");
 3b6:	84 e7       	ldi	r24, 0x74	; 116
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
 3be:	db cf       	rjmp	.-74     	; 0x376 <Diff_200+0x1a>
			}
		else
			{
				V = Vin;
 3c0:	c7 01       	movw	r24, r14
 3c2:	b6 01       	movw	r22, r12
 3c4:	0e 94 bc 02 	call	0x578	; 0x578 <__fixsfsi>
				V1 = (V/10000);
 3c8:	cb 01       	movw	r24, r22
 3ca:	60 e1       	ldi	r22, 0x10	; 16
 3cc:	77 e2       	ldi	r23, 0x27	; 39
 3ce:	0e 94 11 04 	call	0x822	; 0x822 <__divmodhi4>
 3d2:	f6 2e       	mov	r15, r22
				V2 = (V%10000)/1000;
 3d4:	68 ee       	ldi	r22, 0xE8	; 232
 3d6:	73 e0       	ldi	r23, 0x03	; 3
 3d8:	0e 94 11 04 	call	0x822	; 0x822 <__divmodhi4>
 3dc:	06 2f       	mov	r16, r22
				V3 = ((V%10000)%1000)/100;
 3de:	64 e6       	ldi	r22, 0x64	; 100
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	0e 94 11 04 	call	0x822	; 0x822 <__divmodhi4>
 3e6:	16 2f       	mov	r17, r22
				V4 = ((((V%10000)%1000))%100)/10;
 3e8:	6a e0       	ldi	r22, 0x0A	; 10
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	0e 94 11 04 	call	0x822	; 0x822 <__divmodhi4>
 3f0:	d6 2f       	mov	r29, r22
 3f2:	c8 2f       	mov	r28, r24
				V5 = ((((V%10000)%1000))%100)%10;
				LCD_com(0Xc5);
 3f4:	85 ec       	ldi	r24, 0xC5	; 197
 3f6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
				LCD_char(V1+0x30);
 3fa:	80 e3       	ldi	r24, 0x30	; 48
 3fc:	8f 0d       	add	r24, r15
 3fe:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V2+0x30);
 402:	80 e3       	ldi	r24, 0x30	; 48
 404:	80 0f       	add	r24, r16
 406:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V3+0x30);
 40a:	80 e3       	ldi	r24, 0x30	; 48
 40c:	81 0f       	add	r24, r17
 40e:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V4+0x30);
 412:	80 e3       	ldi	r24, 0x30	; 48
 414:	8d 0f       	add	r24, r29
 416:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(',');
 41a:	8c e2       	ldi	r24, 0x2C	; 44
 41c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
				LCD_char(V5+0x30);
 420:	80 e3       	ldi	r24, 0x30	; 48
 422:	8c 0f       	add	r24, r28
 424:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_char>
 428:	a6 cf       	rjmp	.-180    	; 0x376 <Diff_200+0x1a>

0000042a <Diff>:
	}
}

void Diff()
{
	LCD_com(0x01);
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Diff mode");
 430:	85 e9       	ldi	r24, 0x95	; 149
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
 438:	2f ef       	ldi	r18, 0xFF	; 255
 43a:	80 e7       	ldi	r24, 0x70	; 112
 43c:	92 e0       	ldi	r25, 0x02	; 2
 43e:	21 50       	subi	r18, 0x01	; 1
 440:	80 40       	sbci	r24, 0x00	; 0
 442:	90 40       	sbci	r25, 0x00	; 0
 444:	e1 f7       	brne	.-8      	; 0x43e <Diff+0x14>
 446:	00 c0       	rjmp	.+0      	; 0x448 <Diff+0x1e>
 448:	00 00       	nop
	_delay_ms(100);
	LCD_com(0x01);
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("select Gain");
 450:	8f e9       	ldi	r24, 0x9F	; 159
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	
	while(1)
	{
		
		if((PINB & (1<<Gain_200)) == 0)
 458:	b4 99       	sbic	0x16, 4	; 22
 45a:	09 c0       	rjmp	.+18     	; 0x46e <__stack+0xf>
 45c:	8f e1       	ldi	r24, 0x1F	; 31
 45e:	9e e4       	ldi	r25, 0x4E	; 78
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <__stack+0x1>
 464:	00 c0       	rjmp	.+0      	; 0x466 <__stack+0x7>
 466:	00 00       	nop
		{
			_delay_ms(10);
			if((PINB & (1<<Gain_200)) == 0)
 468:	b4 9b       	sbis	0x16, 4	; 22
			{
				Diff_200();
 46a:	0e 94 ae 01 	call	0x35c	; 0x35c <Diff_200>
			}
		}
	
		if((PINB & (1<<Gain_10)) == 0)
 46e:	b3 99       	sbic	0x16, 3	; 22
 470:	09 c0       	rjmp	.+18     	; 0x484 <__stack+0x25>
 472:	8f e1       	ldi	r24, 0x1F	; 31
 474:	9e e4       	ldi	r25, 0x4E	; 78
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <__stack+0x17>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <__stack+0x1d>
 47c:	00 00       	nop
		{
			_delay_ms(10);
			if((PINB & (1<<Gain_10)) == 0)
 47e:	b3 9b       	sbis	0x16, 3	; 22
			{
			Diff_10();
 480:	0e 94 3e 01 	call	0x27c	; 0x27c <Diff_10>
			}
		}
		
		if((PINB & (1<<Gain_1)) == 0)
 484:	b2 99       	sbic	0x16, 2	; 22
 486:	e8 cf       	rjmp	.-48     	; 0x458 <Diff+0x2e>
 488:	8f e1       	ldi	r24, 0x1F	; 31
 48a:	9e e4       	ldi	r25, 0x4E	; 78
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <__stack+0x2d>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__stack+0x33>
 492:	00 00       	nop
		{
			_delay_ms(10);
			if((PINB & (1<<Gain_1)) == 0)
 494:	b2 99       	sbic	0x16, 2	; 22
 496:	e0 cf       	rjmp	.-64     	; 0x458 <Diff+0x2e>
			{
				Diff_1();
 498:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Diff_1>

0000049c <main>:
void Diff_200();


int main(void)
{
    LCD_com_DDR |= (1<<RS) | (1<<EN)|(1<<RW)|(0<<Single_mode)|(0<<Diff_mode)|(0<<Gain_1)|(0<<Gain_10)|(0<<Gain_200) ;
 49c:	87 b3       	in	r24, 0x17	; 23
 49e:	80 6e       	ori	r24, 0xE0	; 224
 4a0:	87 bb       	out	0x17, r24	; 23
    PORTB |= (1<<Single_mode)|(1<<Diff_mode)|(1<<Gain_1)|(1<<Gain_10)|(1<<Gain_200);
 4a2:	88 b3       	in	r24, 0x18	; 24
 4a4:	8f 61       	ori	r24, 0x1F	; 31
 4a6:	88 bb       	out	0x18, r24	; 24
	LCD_data_DDR = 0xFF;
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	81 bb       	out	0x11, r24	; 17
	LCD_com(0x38);
 4ac:	88 e3       	ldi	r24, 0x38	; 56
 4ae:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_com(0x0E);
 4b2:	8e e0       	ldi	r24, 0x0E	; 14
 4b4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_com(0x01);
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	
	LCD_com(0X83);
 4be:	83 e8       	ldi	r24, 0x83	; 131
 4c0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("ESD Project");
 4c4:	8b ea       	ldi	r24, 0xAB	; 171
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	LCD_com(0xC4);
 4cc:	84 ec       	ldi	r24, 0xC4	; 196
 4ce:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Voltmeter");
 4d2:	87 eb       	ldi	r24, 0xB7	; 183
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
 4da:	2f ef       	ldi	r18, 0xFF	; 255
 4dc:	80 e7       	ldi	r24, 0x70	; 112
 4de:	92 e0       	ldi	r25, 0x02	; 2
 4e0:	21 50       	subi	r18, 0x01	; 1
 4e2:	80 40       	sbci	r24, 0x00	; 0
 4e4:	90 40       	sbci	r25, 0x00	; 0
 4e6:	e1 f7       	brne	.-8      	; 0x4e0 <main+0x44>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <main+0x4e>
 4ea:	00 00       	nop
	_delay_ms(100);

	//BUTTON_DDR = 0x00;
	BUTTON_PORT = 0xf8;
 4ec:	88 ef       	ldi	r24, 0xF8	; 248
 4ee:	88 bb       	out	0x18, r24	; 24
	
	LCD_com(0x01);
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_com(0x80);
 4f6:	80 e8       	ldi	r24, 0x80	; 128
 4f8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Click the button");
 4fc:	81 ec       	ldi	r24, 0xC1	; 193
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	LCD_com(0xC0);
 504:	80 ec       	ldi	r24, 0xC0	; 192
 506:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("to select mode!");
 50a:	82 ed       	ldi	r24, 0xD2	; 210
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
 512:	2f ef       	ldi	r18, 0xFF	; 255
 514:	80 e7       	ldi	r24, 0x70	; 112
 516:	92 e0       	ldi	r25, 0x02	; 2
 518:	21 50       	subi	r18, 0x01	; 1
 51a:	80 40       	sbci	r24, 0x00	; 0
 51c:	90 40       	sbci	r25, 0x00	; 0
 51e:	e1 f7       	brne	.-8      	; 0x518 <main+0x7c>
 520:	00 c0       	rjmp	.+0      	; 0x522 <main+0x86>
 522:	00 00       	nop
	_delay_ms(100);
	
	LCD_com(0x01);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Single");
 52a:	82 ee       	ldi	r24, 0xE2	; 226
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	LCD_com(0xC0);
 532:	80 ec       	ldi	r24, 0xC0	; 192
 534:	0e 94 41 00 	call	0x82	; 0x82 <LCD_com>
	LCD_string("Differential");
 538:	89 ee       	ldi	r24, 0xE9	; 233
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 75 00 	call	0xea	; 0xea <LCD_string>
	
    while (1) 
    {
		if((PINB & (1<<Diff_mode)) == 0)
 540:	b1 99       	sbic	0x16, 1	; 22
 542:	09 c0       	rjmp	.+18     	; 0x556 <main+0xba>
 544:	8f e1       	ldi	r24, 0x1F	; 31
 546:	9e e4       	ldi	r25, 0x4E	; 78
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <main+0xac>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <main+0xb2>
 54e:	00 00       	nop
		{
			_delay_ms(10);
			if((PINB & (1<<Diff_mode)) == 0)
 550:	b1 9b       	sbis	0x16, 1	; 22
			Diff();
 552:	0e 94 15 02 	call	0x42a	; 0x42a <Diff>
		}
		
		if((PINB & (1<<Single_mode)) == 0)
 556:	b0 99       	sbic	0x16, 0	; 22
 558:	f3 cf       	rjmp	.-26     	; 0x540 <main+0xa4>
 55a:	8f e1       	ldi	r24, 0x1F	; 31
 55c:	9e e4       	ldi	r25, 0x4E	; 78
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	f1 f7       	brne	.-4      	; 0x55e <main+0xc2>
 562:	00 c0       	rjmp	.+0      	; 0x564 <main+0xc8>
 564:	00 00       	nop
		{
			_delay_ms(10);
			if((PINB & (1<<Single_mode)) == 0)
 566:	b0 99       	sbic	0x16, 0	; 22
 568:	eb cf       	rjmp	.-42     	; 0x540 <main+0xa4>
			Single();
 56a:	0e 94 8b 00 	call	0x116	; 0x116 <Single>

0000056e <__cmpsf2>:
 56e:	0e 94 2f 03 	call	0x65e	; 0x65e <__fp_cmp>
 572:	08 f4       	brcc	.+2      	; 0x576 <__cmpsf2+0x8>
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	08 95       	ret

00000578 <__fixsfsi>:
 578:	0e 94 c3 02 	call	0x586	; 0x586 <__fixunssfsi>
 57c:	68 94       	set
 57e:	b1 11       	cpse	r27, r1
 580:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__fp_szero>
 584:	08 95       	ret

00000586 <__fixunssfsi>:
 586:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_splitA>
 58a:	88 f0       	brcs	.+34     	; 0x5ae <__fixunssfsi+0x28>
 58c:	9f 57       	subi	r25, 0x7F	; 127
 58e:	98 f0       	brcs	.+38     	; 0x5b6 <__fixunssfsi+0x30>
 590:	b9 2f       	mov	r27, r25
 592:	99 27       	eor	r25, r25
 594:	b7 51       	subi	r27, 0x17	; 23
 596:	b0 f0       	brcs	.+44     	; 0x5c4 <__fixunssfsi+0x3e>
 598:	e1 f0       	breq	.+56     	; 0x5d2 <__fixunssfsi+0x4c>
 59a:	66 0f       	add	r22, r22
 59c:	77 1f       	adc	r23, r23
 59e:	88 1f       	adc	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	1a f0       	brmi	.+6      	; 0x5aa <__fixunssfsi+0x24>
 5a4:	ba 95       	dec	r27
 5a6:	c9 f7       	brne	.-14     	; 0x59a <__fixunssfsi+0x14>
 5a8:	14 c0       	rjmp	.+40     	; 0x5d2 <__fixunssfsi+0x4c>
 5aa:	b1 30       	cpi	r27, 0x01	; 1
 5ac:	91 f0       	breq	.+36     	; 0x5d2 <__fixunssfsi+0x4c>
 5ae:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_zero>
 5b2:	b1 e0       	ldi	r27, 0x01	; 1
 5b4:	08 95       	ret
 5b6:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__fp_zero>
 5ba:	67 2f       	mov	r22, r23
 5bc:	78 2f       	mov	r23, r24
 5be:	88 27       	eor	r24, r24
 5c0:	b8 5f       	subi	r27, 0xF8	; 248
 5c2:	39 f0       	breq	.+14     	; 0x5d2 <__fixunssfsi+0x4c>
 5c4:	b9 3f       	cpi	r27, 0xF9	; 249
 5c6:	cc f3       	brlt	.-14     	; 0x5ba <__fixunssfsi+0x34>
 5c8:	86 95       	lsr	r24
 5ca:	77 95       	ror	r23
 5cc:	67 95       	ror	r22
 5ce:	b3 95       	inc	r27
 5d0:	d9 f7       	brne	.-10     	; 0x5c8 <__fixunssfsi+0x42>
 5d2:	3e f4       	brtc	.+14     	; 0x5e2 <__fixunssfsi+0x5c>
 5d4:	90 95       	com	r25
 5d6:	80 95       	com	r24
 5d8:	70 95       	com	r23
 5da:	61 95       	neg	r22
 5dc:	7f 4f       	sbci	r23, 0xFF	; 255
 5de:	8f 4f       	sbci	r24, 0xFF	; 255
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	08 95       	ret

000005e4 <__floatunsisf>:
 5e4:	e8 94       	clt
 5e6:	09 c0       	rjmp	.+18     	; 0x5fa <__floatsisf+0x12>

000005e8 <__floatsisf>:
 5e8:	97 fb       	bst	r25, 7
 5ea:	3e f4       	brtc	.+14     	; 0x5fa <__floatsisf+0x12>
 5ec:	90 95       	com	r25
 5ee:	80 95       	com	r24
 5f0:	70 95       	com	r23
 5f2:	61 95       	neg	r22
 5f4:	7f 4f       	sbci	r23, 0xFF	; 255
 5f6:	8f 4f       	sbci	r24, 0xFF	; 255
 5f8:	9f 4f       	sbci	r25, 0xFF	; 255
 5fa:	99 23       	and	r25, r25
 5fc:	a9 f0       	breq	.+42     	; 0x628 <__floatsisf+0x40>
 5fe:	f9 2f       	mov	r31, r25
 600:	96 e9       	ldi	r25, 0x96	; 150
 602:	bb 27       	eor	r27, r27
 604:	93 95       	inc	r25
 606:	f6 95       	lsr	r31
 608:	87 95       	ror	r24
 60a:	77 95       	ror	r23
 60c:	67 95       	ror	r22
 60e:	b7 95       	ror	r27
 610:	f1 11       	cpse	r31, r1
 612:	f8 cf       	rjmp	.-16     	; 0x604 <__floatsisf+0x1c>
 614:	fa f4       	brpl	.+62     	; 0x654 <__floatsisf+0x6c>
 616:	bb 0f       	add	r27, r27
 618:	11 f4       	brne	.+4      	; 0x61e <__floatsisf+0x36>
 61a:	60 ff       	sbrs	r22, 0
 61c:	1b c0       	rjmp	.+54     	; 0x654 <__floatsisf+0x6c>
 61e:	6f 5f       	subi	r22, 0xFF	; 255
 620:	7f 4f       	sbci	r23, 0xFF	; 255
 622:	8f 4f       	sbci	r24, 0xFF	; 255
 624:	9f 4f       	sbci	r25, 0xFF	; 255
 626:	16 c0       	rjmp	.+44     	; 0x654 <__floatsisf+0x6c>
 628:	88 23       	and	r24, r24
 62a:	11 f0       	breq	.+4      	; 0x630 <__floatsisf+0x48>
 62c:	96 e9       	ldi	r25, 0x96	; 150
 62e:	11 c0       	rjmp	.+34     	; 0x652 <__floatsisf+0x6a>
 630:	77 23       	and	r23, r23
 632:	21 f0       	breq	.+8      	; 0x63c <__floatsisf+0x54>
 634:	9e e8       	ldi	r25, 0x8E	; 142
 636:	87 2f       	mov	r24, r23
 638:	76 2f       	mov	r23, r22
 63a:	05 c0       	rjmp	.+10     	; 0x646 <__floatsisf+0x5e>
 63c:	66 23       	and	r22, r22
 63e:	71 f0       	breq	.+28     	; 0x65c <__floatsisf+0x74>
 640:	96 e8       	ldi	r25, 0x86	; 134
 642:	86 2f       	mov	r24, r22
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	2a f0       	brmi	.+10     	; 0x654 <__floatsisf+0x6c>
 64a:	9a 95       	dec	r25
 64c:	66 0f       	add	r22, r22
 64e:	77 1f       	adc	r23, r23
 650:	88 1f       	adc	r24, r24
 652:	da f7       	brpl	.-10     	; 0x64a <__floatsisf+0x62>
 654:	88 0f       	add	r24, r24
 656:	96 95       	lsr	r25
 658:	87 95       	ror	r24
 65a:	97 f9       	bld	r25, 7
 65c:	08 95       	ret

0000065e <__fp_cmp>:
 65e:	99 0f       	add	r25, r25
 660:	00 08       	sbc	r0, r0
 662:	55 0f       	add	r21, r21
 664:	aa 0b       	sbc	r26, r26
 666:	e0 e8       	ldi	r30, 0x80	; 128
 668:	fe ef       	ldi	r31, 0xFE	; 254
 66a:	16 16       	cp	r1, r22
 66c:	17 06       	cpc	r1, r23
 66e:	e8 07       	cpc	r30, r24
 670:	f9 07       	cpc	r31, r25
 672:	c0 f0       	brcs	.+48     	; 0x6a4 <__fp_cmp+0x46>
 674:	12 16       	cp	r1, r18
 676:	13 06       	cpc	r1, r19
 678:	e4 07       	cpc	r30, r20
 67a:	f5 07       	cpc	r31, r21
 67c:	98 f0       	brcs	.+38     	; 0x6a4 <__fp_cmp+0x46>
 67e:	62 1b       	sub	r22, r18
 680:	73 0b       	sbc	r23, r19
 682:	84 0b       	sbc	r24, r20
 684:	95 0b       	sbc	r25, r21
 686:	39 f4       	brne	.+14     	; 0x696 <__fp_cmp+0x38>
 688:	0a 26       	eor	r0, r26
 68a:	61 f0       	breq	.+24     	; 0x6a4 <__fp_cmp+0x46>
 68c:	23 2b       	or	r18, r19
 68e:	24 2b       	or	r18, r20
 690:	25 2b       	or	r18, r21
 692:	21 f4       	brne	.+8      	; 0x69c <__fp_cmp+0x3e>
 694:	08 95       	ret
 696:	0a 26       	eor	r0, r26
 698:	09 f4       	brne	.+2      	; 0x69c <__fp_cmp+0x3e>
 69a:	a1 40       	sbci	r26, 0x01	; 1
 69c:	a6 95       	lsr	r26
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	81 1d       	adc	r24, r1
 6a2:	81 1d       	adc	r24, r1
 6a4:	08 95       	ret

000006a6 <__fp_split3>:
 6a6:	57 fd       	sbrc	r21, 7
 6a8:	90 58       	subi	r25, 0x80	; 128
 6aa:	44 0f       	add	r20, r20
 6ac:	55 1f       	adc	r21, r21
 6ae:	59 f0       	breq	.+22     	; 0x6c6 <__fp_splitA+0x10>
 6b0:	5f 3f       	cpi	r21, 0xFF	; 255
 6b2:	71 f0       	breq	.+28     	; 0x6d0 <__fp_splitA+0x1a>
 6b4:	47 95       	ror	r20

000006b6 <__fp_splitA>:
 6b6:	88 0f       	add	r24, r24
 6b8:	97 fb       	bst	r25, 7
 6ba:	99 1f       	adc	r25, r25
 6bc:	61 f0       	breq	.+24     	; 0x6d6 <__fp_splitA+0x20>
 6be:	9f 3f       	cpi	r25, 0xFF	; 255
 6c0:	79 f0       	breq	.+30     	; 0x6e0 <__fp_splitA+0x2a>
 6c2:	87 95       	ror	r24
 6c4:	08 95       	ret
 6c6:	12 16       	cp	r1, r18
 6c8:	13 06       	cpc	r1, r19
 6ca:	14 06       	cpc	r1, r20
 6cc:	55 1f       	adc	r21, r21
 6ce:	f2 cf       	rjmp	.-28     	; 0x6b4 <__fp_split3+0xe>
 6d0:	46 95       	lsr	r20
 6d2:	f1 df       	rcall	.-30     	; 0x6b6 <__fp_splitA>
 6d4:	08 c0       	rjmp	.+16     	; 0x6e6 <__fp_splitA+0x30>
 6d6:	16 16       	cp	r1, r22
 6d8:	17 06       	cpc	r1, r23
 6da:	18 06       	cpc	r1, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	f1 cf       	rjmp	.-30     	; 0x6c2 <__fp_splitA+0xc>
 6e0:	86 95       	lsr	r24
 6e2:	71 05       	cpc	r23, r1
 6e4:	61 05       	cpc	r22, r1
 6e6:	08 94       	sec
 6e8:	08 95       	ret

000006ea <__fp_zero>:
 6ea:	e8 94       	clt

000006ec <__fp_szero>:
 6ec:	bb 27       	eor	r27, r27
 6ee:	66 27       	eor	r22, r22
 6f0:	77 27       	eor	r23, r23
 6f2:	cb 01       	movw	r24, r22
 6f4:	97 f9       	bld	r25, 7
 6f6:	08 95       	ret

000006f8 <__mulsf3>:
 6f8:	0e 94 8f 03 	call	0x71e	; 0x71e <__mulsf3x>
 6fc:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_round>
 700:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__fp_pscA>
 704:	38 f0       	brcs	.+14     	; 0x714 <__mulsf3+0x1c>
 706:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__fp_pscB>
 70a:	20 f0       	brcs	.+8      	; 0x714 <__mulsf3+0x1c>
 70c:	95 23       	and	r25, r21
 70e:	11 f0       	breq	.+4      	; 0x714 <__mulsf3+0x1c>
 710:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_inf>
 714:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__fp_nan>
 718:	11 24       	eor	r1, r1
 71a:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__fp_szero>

0000071e <__mulsf3x>:
 71e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fp_split3>
 722:	70 f3       	brcs	.-36     	; 0x700 <__mulsf3+0x8>

00000724 <__mulsf3_pse>:
 724:	95 9f       	mul	r25, r21
 726:	c1 f3       	breq	.-16     	; 0x718 <__mulsf3+0x20>
 728:	95 0f       	add	r25, r21
 72a:	50 e0       	ldi	r21, 0x00	; 0
 72c:	55 1f       	adc	r21, r21
 72e:	62 9f       	mul	r22, r18
 730:	f0 01       	movw	r30, r0
 732:	72 9f       	mul	r23, r18
 734:	bb 27       	eor	r27, r27
 736:	f0 0d       	add	r31, r0
 738:	b1 1d       	adc	r27, r1
 73a:	63 9f       	mul	r22, r19
 73c:	aa 27       	eor	r26, r26
 73e:	f0 0d       	add	r31, r0
 740:	b1 1d       	adc	r27, r1
 742:	aa 1f       	adc	r26, r26
 744:	64 9f       	mul	r22, r20
 746:	66 27       	eor	r22, r22
 748:	b0 0d       	add	r27, r0
 74a:	a1 1d       	adc	r26, r1
 74c:	66 1f       	adc	r22, r22
 74e:	82 9f       	mul	r24, r18
 750:	22 27       	eor	r18, r18
 752:	b0 0d       	add	r27, r0
 754:	a1 1d       	adc	r26, r1
 756:	62 1f       	adc	r22, r18
 758:	73 9f       	mul	r23, r19
 75a:	b0 0d       	add	r27, r0
 75c:	a1 1d       	adc	r26, r1
 75e:	62 1f       	adc	r22, r18
 760:	83 9f       	mul	r24, r19
 762:	a0 0d       	add	r26, r0
 764:	61 1d       	adc	r22, r1
 766:	22 1f       	adc	r18, r18
 768:	74 9f       	mul	r23, r20
 76a:	33 27       	eor	r19, r19
 76c:	a0 0d       	add	r26, r0
 76e:	61 1d       	adc	r22, r1
 770:	23 1f       	adc	r18, r19
 772:	84 9f       	mul	r24, r20
 774:	60 0d       	add	r22, r0
 776:	21 1d       	adc	r18, r1
 778:	82 2f       	mov	r24, r18
 77a:	76 2f       	mov	r23, r22
 77c:	6a 2f       	mov	r22, r26
 77e:	11 24       	eor	r1, r1
 780:	9f 57       	subi	r25, 0x7F	; 127
 782:	50 40       	sbci	r21, 0x00	; 0
 784:	9a f0       	brmi	.+38     	; 0x7ac <__mulsf3_pse+0x88>
 786:	f1 f0       	breq	.+60     	; 0x7c4 <__mulsf3_pse+0xa0>
 788:	88 23       	and	r24, r24
 78a:	4a f0       	brmi	.+18     	; 0x79e <__mulsf3_pse+0x7a>
 78c:	ee 0f       	add	r30, r30
 78e:	ff 1f       	adc	r31, r31
 790:	bb 1f       	adc	r27, r27
 792:	66 1f       	adc	r22, r22
 794:	77 1f       	adc	r23, r23
 796:	88 1f       	adc	r24, r24
 798:	91 50       	subi	r25, 0x01	; 1
 79a:	50 40       	sbci	r21, 0x00	; 0
 79c:	a9 f7       	brne	.-22     	; 0x788 <__mulsf3_pse+0x64>
 79e:	9e 3f       	cpi	r25, 0xFE	; 254
 7a0:	51 05       	cpc	r21, r1
 7a2:	80 f0       	brcs	.+32     	; 0x7c4 <__mulsf3_pse+0xa0>
 7a4:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_inf>
 7a8:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__fp_szero>
 7ac:	5f 3f       	cpi	r21, 0xFF	; 255
 7ae:	e4 f3       	brlt	.-8      	; 0x7a8 <__mulsf3_pse+0x84>
 7b0:	98 3e       	cpi	r25, 0xE8	; 232
 7b2:	d4 f3       	brlt	.-12     	; 0x7a8 <__mulsf3_pse+0x84>
 7b4:	86 95       	lsr	r24
 7b6:	77 95       	ror	r23
 7b8:	67 95       	ror	r22
 7ba:	b7 95       	ror	r27
 7bc:	f7 95       	ror	r31
 7be:	e7 95       	ror	r30
 7c0:	9f 5f       	subi	r25, 0xFF	; 255
 7c2:	c1 f7       	brne	.-16     	; 0x7b4 <__mulsf3_pse+0x90>
 7c4:	fe 2b       	or	r31, r30
 7c6:	88 0f       	add	r24, r24
 7c8:	91 1d       	adc	r25, r1
 7ca:	96 95       	lsr	r25
 7cc:	87 95       	ror	r24
 7ce:	97 f9       	bld	r25, 7
 7d0:	08 95       	ret

000007d2 <__fp_inf>:
 7d2:	97 f9       	bld	r25, 7
 7d4:	9f 67       	ori	r25, 0x7F	; 127
 7d6:	80 e8       	ldi	r24, 0x80	; 128
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	08 95       	ret

000007de <__fp_nan>:
 7de:	9f ef       	ldi	r25, 0xFF	; 255
 7e0:	80 ec       	ldi	r24, 0xC0	; 192
 7e2:	08 95       	ret

000007e4 <__fp_pscA>:
 7e4:	00 24       	eor	r0, r0
 7e6:	0a 94       	dec	r0
 7e8:	16 16       	cp	r1, r22
 7ea:	17 06       	cpc	r1, r23
 7ec:	18 06       	cpc	r1, r24
 7ee:	09 06       	cpc	r0, r25
 7f0:	08 95       	ret

000007f2 <__fp_pscB>:
 7f2:	00 24       	eor	r0, r0
 7f4:	0a 94       	dec	r0
 7f6:	12 16       	cp	r1, r18
 7f8:	13 06       	cpc	r1, r19
 7fa:	14 06       	cpc	r1, r20
 7fc:	05 06       	cpc	r0, r21
 7fe:	08 95       	ret

00000800 <__fp_round>:
 800:	09 2e       	mov	r0, r25
 802:	03 94       	inc	r0
 804:	00 0c       	add	r0, r0
 806:	11 f4       	brne	.+4      	; 0x80c <__fp_round+0xc>
 808:	88 23       	and	r24, r24
 80a:	52 f0       	brmi	.+20     	; 0x820 <__fp_round+0x20>
 80c:	bb 0f       	add	r27, r27
 80e:	40 f4       	brcc	.+16     	; 0x820 <__fp_round+0x20>
 810:	bf 2b       	or	r27, r31
 812:	11 f4       	brne	.+4      	; 0x818 <__fp_round+0x18>
 814:	60 ff       	sbrs	r22, 0
 816:	04 c0       	rjmp	.+8      	; 0x820 <__fp_round+0x20>
 818:	6f 5f       	subi	r22, 0xFF	; 255
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	8f 4f       	sbci	r24, 0xFF	; 255
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	08 95       	ret

00000822 <__divmodhi4>:
 822:	97 fb       	bst	r25, 7
 824:	07 2e       	mov	r0, r23
 826:	16 f4       	brtc	.+4      	; 0x82c <__divmodhi4+0xa>
 828:	00 94       	com	r0
 82a:	07 d0       	rcall	.+14     	; 0x83a <__divmodhi4_neg1>
 82c:	77 fd       	sbrc	r23, 7
 82e:	09 d0       	rcall	.+18     	; 0x842 <__divmodhi4_neg2>
 830:	0e 94 44 04 	call	0x888	; 0x888 <__udivmodhi4>
 834:	07 fc       	sbrc	r0, 7
 836:	05 d0       	rcall	.+10     	; 0x842 <__divmodhi4_neg2>
 838:	3e f4       	brtc	.+14     	; 0x848 <__divmodhi4_exit>

0000083a <__divmodhi4_neg1>:
 83a:	90 95       	com	r25
 83c:	81 95       	neg	r24
 83e:	9f 4f       	sbci	r25, 0xFF	; 255
 840:	08 95       	ret

00000842 <__divmodhi4_neg2>:
 842:	70 95       	com	r23
 844:	61 95       	neg	r22
 846:	7f 4f       	sbci	r23, 0xFF	; 255

00000848 <__divmodhi4_exit>:
 848:	08 95       	ret

0000084a <__divmodsi4>:
 84a:	05 2e       	mov	r0, r21
 84c:	97 fb       	bst	r25, 7
 84e:	1e f4       	brtc	.+6      	; 0x856 <__divmodsi4+0xc>
 850:	00 94       	com	r0
 852:	0e 94 3c 04 	call	0x878	; 0x878 <__negsi2>
 856:	57 fd       	sbrc	r21, 7
 858:	07 d0       	rcall	.+14     	; 0x868 <__divmodsi4_neg2>
 85a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__udivmodsi4>
 85e:	07 fc       	sbrc	r0, 7
 860:	03 d0       	rcall	.+6      	; 0x868 <__divmodsi4_neg2>
 862:	4e f4       	brtc	.+18     	; 0x876 <__divmodsi4_exit>
 864:	0c 94 3c 04 	jmp	0x878	; 0x878 <__negsi2>

00000868 <__divmodsi4_neg2>:
 868:	50 95       	com	r21
 86a:	40 95       	com	r20
 86c:	30 95       	com	r19
 86e:	21 95       	neg	r18
 870:	3f 4f       	sbci	r19, 0xFF	; 255
 872:	4f 4f       	sbci	r20, 0xFF	; 255
 874:	5f 4f       	sbci	r21, 0xFF	; 255

00000876 <__divmodsi4_exit>:
 876:	08 95       	ret

00000878 <__negsi2>:
 878:	90 95       	com	r25
 87a:	80 95       	com	r24
 87c:	70 95       	com	r23
 87e:	61 95       	neg	r22
 880:	7f 4f       	sbci	r23, 0xFF	; 255
 882:	8f 4f       	sbci	r24, 0xFF	; 255
 884:	9f 4f       	sbci	r25, 0xFF	; 255
 886:	08 95       	ret

00000888 <__udivmodhi4>:
 888:	aa 1b       	sub	r26, r26
 88a:	bb 1b       	sub	r27, r27
 88c:	51 e1       	ldi	r21, 0x11	; 17
 88e:	07 c0       	rjmp	.+14     	; 0x89e <__udivmodhi4_ep>

00000890 <__udivmodhi4_loop>:
 890:	aa 1f       	adc	r26, r26
 892:	bb 1f       	adc	r27, r27
 894:	a6 17       	cp	r26, r22
 896:	b7 07       	cpc	r27, r23
 898:	10 f0       	brcs	.+4      	; 0x89e <__udivmodhi4_ep>
 89a:	a6 1b       	sub	r26, r22
 89c:	b7 0b       	sbc	r27, r23

0000089e <__udivmodhi4_ep>:
 89e:	88 1f       	adc	r24, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	5a 95       	dec	r21
 8a4:	a9 f7       	brne	.-22     	; 0x890 <__udivmodhi4_loop>
 8a6:	80 95       	com	r24
 8a8:	90 95       	com	r25
 8aa:	bc 01       	movw	r22, r24
 8ac:	cd 01       	movw	r24, r26
 8ae:	08 95       	ret

000008b0 <__udivmodsi4>:
 8b0:	a1 e2       	ldi	r26, 0x21	; 33
 8b2:	1a 2e       	mov	r1, r26
 8b4:	aa 1b       	sub	r26, r26
 8b6:	bb 1b       	sub	r27, r27
 8b8:	fd 01       	movw	r30, r26
 8ba:	0d c0       	rjmp	.+26     	; 0x8d6 <__udivmodsi4_ep>

000008bc <__udivmodsi4_loop>:
 8bc:	aa 1f       	adc	r26, r26
 8be:	bb 1f       	adc	r27, r27
 8c0:	ee 1f       	adc	r30, r30
 8c2:	ff 1f       	adc	r31, r31
 8c4:	a2 17       	cp	r26, r18
 8c6:	b3 07       	cpc	r27, r19
 8c8:	e4 07       	cpc	r30, r20
 8ca:	f5 07       	cpc	r31, r21
 8cc:	20 f0       	brcs	.+8      	; 0x8d6 <__udivmodsi4_ep>
 8ce:	a2 1b       	sub	r26, r18
 8d0:	b3 0b       	sbc	r27, r19
 8d2:	e4 0b       	sbc	r30, r20
 8d4:	f5 0b       	sbc	r31, r21

000008d6 <__udivmodsi4_ep>:
 8d6:	66 1f       	adc	r22, r22
 8d8:	77 1f       	adc	r23, r23
 8da:	88 1f       	adc	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	1a 94       	dec	r1
 8e0:	69 f7       	brne	.-38     	; 0x8bc <__udivmodsi4_loop>
 8e2:	60 95       	com	r22
 8e4:	70 95       	com	r23
 8e6:	80 95       	com	r24
 8e8:	90 95       	com	r25
 8ea:	9b 01       	movw	r18, r22
 8ec:	ac 01       	movw	r20, r24
 8ee:	bd 01       	movw	r22, r26
 8f0:	cf 01       	movw	r24, r30
 8f2:	08 95       	ret

000008f4 <_exit>:
 8f4:	f8 94       	cli

000008f6 <__stop_program>:
 8f6:	ff cf       	rjmp	.-2      	; 0x8f6 <__stop_program>
